<refentry id="parastation_conf">

  <refmeta>
    <refentrytitle>parastation.conf</refentrytitle>
    <manvolnum>5</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>parastation.conf</refname>
    <refname>psm.config</refname>
    <refpurpose>the &ps; configuration file</refpurpose>
  </refnamediv>

  <refsect1><title>Description</title>
    <para>
      Upon execution, the &ps; daemon <xref linkend="psid"/> and the &ps;
      license daemon <xref linkend="psld"/> read their configuration
      information from a configuration file which, by default, is
      <filename>/etc/parastation.conf</filename>. There are various parameter
      that can be modified persistently within this configuration file.
    </para>
    <para>
      The main syntax of the configuration file is one parameter per line. Due
      to ease of use there are some parameters, e.g. <command>Nodes</command>,
      that are implemented in an environment mode. This mode enables to set
      more than one parameter within a command. Environment mode parameters may
      last longer than one line.
    </para>
    <para>
      Line continuation is possible. If the last character within a
      line before the newline character is a "\", the newline
      character will be ignored and the next line is appended to the
      current line.
    </para>
    <para>
      Comments are starting with a "#". All remaining characters on
      the line will be ignored. Keep in mind that line continuation
      also works within comments, i.e. if the last character of the
      line is a "\", the next line will be ignored, too.
    </para>
    <para>
      The parser used to analyze <filename>parastation.conf</filename> is
      <emphasis role="bold">not</emphasis> case sensitive. This means, that all
      keywords within the configuration file may be written in any combination
      of upper- and lowercase characters. Within this document a mixed
      upper-/lowercase notation is used to provide more readable keywords. The
      same notation is used in the configuration file template
      <filename>parastation.conf.tmpl</filename> contained in the distributed
      &ps; system. The template file can be found in
      <filename>/opt/parastation/config</filename>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
      The different parameters are discussed in the order they should appear
      within the configuration file. Dependencies between parameters -
      resulting in a defined order of parameters - are marked explicitely.
    </para>
    <para>
      Some parameters may be modified using different keywords, e.g. both
      <command>InstallDir</command> and <command>InstallationDir</command>
      modify the directory where the &ps; daemon <xref linkend="psid"/> expects
      the &ps; system installed. In case of different keywords modifying the
      same resource, all keywords are mentioned in front of the parameter's
      discussion.
    </para>
    <para>
      Very few parameters have to be declared in any case in order to enable
      &ps; to run on a cluster. These parameters are
      <command>NrOfNodes</command>, <command>HWType</command>,
      <command>Nodes</command> and <command>LicenseServer</command>. In the
      case of a Myrinet cluster the <envar>PS_ROUTEFILE</envar> environment
      parameters within the <command>Hardware
	<option>myrinet</option></command> declaration also has to be modified.
    </para>
    <para>
      If parameters are declared more than once, the latest declaration is the
      one to use. Do not make use of this behavior as a feature since it may
      create great pitfalls.
    </para>
    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>InstallDir</command>
	    <arg choice="plain"><replaceable>inst-dir</replaceable></arg>
	    <command>, InstallationDir</command>
	    <arg choice="plain"><replaceable>inst-dir</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon to find all the &ps; stuff in
	    <filename><replaceable>inst-dir</replaceable></filename>. The
	    default is <filename>/opt/parastation</filename>.
	  </para>
	  <note>
	    <para>
	      The installation directory has to be declared before
	      <command>LicenseFile</command> is used.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Hardware</command>
	    <arg choice="plain"> <replaceable>name</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon how to handle a distinct hardware. Usually
	    it is not necessary to edit these entries, since the template
	    version of the configuration file contains up to date entries of
	    all supported hardware types. Furthermore a deeper insight into the
	    low-level functionality of &ps; is needed in order to create such
	    an entry.
	  </para>
	  <para>
	    Nevertheless a brief overview on the structure of the
	    <command>Hardware</command> entries is given here.
	  </para>
	  <para>
	    The following five types of parameters within the
	    <command>Hardware</command> environment will get a special handling
	    from the &ps; daemon <xref linkend="psid"/>. These define different
	    script files called in order to execute various operations towards
	    the corresponding communication hardware.
	  </para>
	  <para>
	    All these entries have the form of the parameter's name followed by
	    the corresponding value. The value might be enclosed by single or
	    double quotes in order to allow a space within.
	  </para>
	  <para>
	    The values are interpreted as absolute or relative paths. Relative
	    paths will be looked up relative to
	    <filename><replaceable>InstallDir</replaceable></filename>. If one
	    or more of the scripts are not defined, no corresponding action
	    will take place for this hardware.
	  </para>
	  <variablelist>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>startscript</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Define a script called in order to startup the
		  corresponding communication hardware. This script will be
		  executed when the daemon starts up or after a reset of the 
		  communication hardware.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>stopscript</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Define a script called in order to shutdown the
		  corresponding communication hardware. This script will be
		  executed when the daemon exits or before a reset of the
		  communication hardware.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>setupscript</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Define a script called in order to set special parameters
		  on the corresponding communication hardware.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>statusscript</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Define a script called in order to get a status message
		  from the corresponding communication hardware. This is mainly
		  used in order to generate the lines shown be the
		  <command>status <option>counter</option></command> directive
		  of the &ps; administration tool <xref linkend="psiadmin"/>.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>headerscript</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Define a script called in order to get a header line for
		  the status message produced by the above discussed
		  <command>statusscript</command> .
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	  <para>
	    All further parameters defined within a <command>Hardware</command>
	    section are interpreted as environment variables when calling the
	    above defined scripts. Again these parameters have the form of the
	    parameters name - interpreted as the environments variables name -
	    followed by the correspondings value. The values might be single
	    strings not containing whitespace characters or enclosed by single
	    or double quotes, too.
	  </para>
	  <para>
	    The impact of the environment variables on the scripts of course
	    depend on the scripts itself.
	  </para>
	  <para>
	    At the date three different hardware types are defined within the
	    template configuration file coming with the &ps; software
	    distribution. These hardware types, the corresponding scripts and
	    the environment variables the scripts understand are briefly
	    discussed within the following lines.
	  </para>
	  <variablelist>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>myrinet</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use optimized communication over Myrinet.</para>
		<para>
		  The script used in order to start or stop the hardware and to
		  get counters from the hardware is
		  <command>ps_myrinet</command> located within the
		  <filename>config</filename> directory. This script understand
		  various environment variables:
		</para>
		<variablelist>
		  <varlistentry>
		    <term><envar>PS_MODULE</envar></term>
		    <listitem>
		      <para>The name of the kernel module to use in order to
			handle the Myrinet card. The default is
			<filename>psm.o</filename>.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_MODULEPATH</envar></term>
		    <listitem>
		      <para>The directory to search for the kernel modules.
			Relative paths are looked up relative to
			<filename><replaceable>InstallDir</replaceable></filename>. 
			The default is <filename>bin/modules</filename>.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_ROUTEFILE</envar></term>
		    <listitem>
		      <para>The file containing the correct Myrinet routes for
			the network topology in use. If this is a relative
			path, it is expected to be within the
			<filename>config</filename> subdirectory.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_IPENABLED</envar></term>
		    <listitem>
		      <para>If set to 1, IP over Myrinet will be enabled. The
			default is 0 and hence IP over Myrinet is disabled.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_IPMODULE</envar></term>
		    <listitem>
		      <para>The name of the kernel module that implements IP
			over Myrinet. The default is
			<filename>mod_psn.o</filename>.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_IPPREFIX</envar></term>
		    <listitem>
		      <para>The prefix for Myrinet card's IP address. The full
			IP address will be assembled from the prefix and the
			&ps; Id of the node. Trailing zeros may be omitted from
			the address given here.
		      </para>
		      <para>The default is 192.168.48.</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_IPPREFIXLEN</envar></term>
		    <listitem>
		      <para>The number of valid bits within
			<envar>PS_IPPREFIX</envar>. The default is 20.</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_SPS</envar></term>
		    <listitem>
		      <para>The maximum small packet size for PIO packets.
			Refer to <xref linkend="psiadmin"/> for a more detailed
			description.
		      </para>
		      <para>
			The default is 2000.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_HNPEND</envar></term>
		    <listitem>
		      <para>The number of pending host notify messages. Refer
			to <xref linkend="psiadmin"/> for a more detailed
			description.
		      </para>
		      <para>
			The default is 2.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_ACKPEND</envar></term>
		    <listitem>
		      <para>The number of pending acknowledgements. Refer to
			<xref linkend="psiadmin"/> for a more detailed
			description.
		      </para>
		      <para>
			The default is 1.
		      </para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>ethernet</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use classical TCP/IP communication over Ethernet via an
		  optimized MPI implementation.
		</para>
		<para>
		  Since TCP/IP has to be configured before &ps; starts up, the
		  corresponding script <command>ps_ethernet</command> has
		  almost nothing to do and hence does not understand a single
		  environment variable.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>p4sock</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use optimized communication via (Gigabit)
		  Ethernet.</para>
		<para>
		  The script handling this hardware type
		  <command>ps_p4sock</command> is also located in the
		  <filename>config</filename> subdirectory. It understands the
		  following two environment variables:
		</para>
		<variablelist>
		  <varlistentry>
		    <term><envar>PS_MODULE</envar></term>
		    <listitem>
		      <para>The name of the kernel module to use in order to
			implement the &ps; protocol running on the ethernet
			hardware. The default is <filename>p4sock.o</filename>.
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><envar>PS_MODULEPATH</envar></term>
		    <listitem>
		      <para>The directory to search for the kernel modules.
			Relative paths are looked up relative to
			<filename><replaceable>InstallDir</replaceable></filename>. 
			The default is <filename>bin/modules</filename>.
		      </para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>NrOfNodes</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Define the number of connected nodes including the frontend
	    node. The nodes will be numbered 0 &hellip;
	    <parameter><replaceable>num</replaceable></parameter>-1.
	  </para>
	  <note>
	    <para>
	      There is no default value for <command>NrOfNodes</command>.
	      <command>NrOfNodes</command> has to be declare within the
	      configuration file in any case.
	    </para>
	    <para>
	      The number of connected nodes has to be declared before any
	      <command>Nodes</command>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>HWType</command>
	    <group choice="req">
	      <arg>myrinet</arg>
	      <arg>ethernet</arg>
 	      <arg>p4sock</arg>
	      <arg>none</arg>
	    </group>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>HWType {</command>
	    <group rep="repeat" choice="req">
	      <arg>myrinet</arg>
	      <arg>ethernet</arg>
 	      <arg>p4sock</arg>
	    </group>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Define the default communication hardware available on the
	    nodes of the &ps; cluster. This may be overruled by an explicit
	    <option>HWType</option> option in a <command>Node</command>
	    statement.
	  </para>
	  <para>The hardware types used within this command have to be defined
	    in <command>Hardware</command> declarations before.
	  </para>
	  <para>
	    The available hardware types in the template configuration file
	    are:
	  </para>
	  <variablelist>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>myrinet</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use optimized communication over Myrinet.</para>
		<para>
		  This is only available within &ps3;.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>ethernet</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use classical TCP/IP communication over Ethernet via an
		  optimized MPI implementation.
		</para>
		<para>
		  This is only available within &psfe;.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>p4sock</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use optimized communication via (Gigabit)
		  Ethernet.</para>
		<para>
		  This is only available within &ps4;.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>none</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>No communication hardware at all.</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	  <para>
	    Further hardware declarations might be defined by the user, but
	    this is pretty much undocumented.
	  </para>
	  <para>
	    It is possible to enable more than one hardware type, either as
	    default or on a per node basis. Think of a node that has both, a
	    Myrinet and a Fast Ethernet card. Furthermore the cluster contains
	    nodes that lack Myrinet. Then it might be useful to run jobs only
	    depending on Ethernet communication even on nodes that have a
	    Myrinet card in order to talk to nodes that don't have one. The
	    corresponding <command>HWType</command> declaration then reads
	    <command>HWType {<parameter>myrinet</parameter>
	      <parameter>ethernet</parameter> }</command>.
	  </para>
	  <para>
	    The default value of <command>HWType</command> is
	    <parameter>none</parameter>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>starter</command>
	    &boolargs;
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>If the argument is one of <parameter>yes</parameter>,
	    <parameter>true</parameter> or <parameter>1</parameter>, all nodes
	    declared within a <command>Node</command> statement will allow to
	    start parallel tasks, unless otherwise stated.
	  </para>
	  <para>
	    If the argument is one of <parameter>no</parameter>,
	    <parameter>false</parameter> or <parameter>0</parameter>, starting
	    will be not allowed.
	  </para>
	  <para>
	    It might be useful to prohibit the startup of parallel task from
	    the frontend machine if a batch system is used. This will force all
	    users to use the batch system in order to start their tasks.
	    Otherwise it would be possible to circumvent the batch system by
	    starting parallel task directly from the frontend machine.
	  </para>
	  <para>
	    The default is to allow the starting of parallel tasks from all
	    nodes.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>runJobs</command>
	    &boolargs;
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>If the argument is one of <parameter>yes</parameter>,
	    <parameter>true</parameter> or <parameter>1</parameter>, all nodes
	    declared within a <command>Node</command> statement will allow to
	    run processes of parallel tasks, unless otherwise stated.
	  </para>
	  <para>
	    If the argument is one of <parameter>no</parameter>,
	    <parameter>false</parameter> or <parameter>0</parameter>, &ps; will
	    start no processes on this nodes.
	  </para>
	  <para>
	    It might be useful to prohibit the start of processes on a frontend
	    machine since usually this machine is reserved for interactive work
	    done by the users. When the execution of processes is forbidden on
	    a distinct node, parallel task might be started from this node
	    anyhow.
	  </para>
	  <para>
	    The default is to allow all nodes to run processes of parallel
	    tasks.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Node[s]</command>
	    <arg choice="plain"><replaceable>hostname</replaceable></arg>
	    <arg choice="plain"><replaceable>id</replaceable></arg>
	    <arg>HWtype-entry</arg>
	    <arg>starter-entry</arg>
	    <arg>runJobs-entry</arg>
	    <!--<arg>extraIP <replaceable>ip-addr</replaceable></arg>-->
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>Node[s] {</command>
	    <arg choice="plain">{<replaceable>hostname</replaceable></arg>
	    <arg choice="plain"><replaceable>id</replaceable></arg>
	    <arg>HWtype-entry</arg>
	    <arg>starter-entry</arg>
	    <arg>runJobs-entry</arg>
	    <!--<arg>extraIP <replaceable>ip-addr</replaceable></arg>-->
	    <arg choice="plain">}...</arg>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Define one or more nodes to be part of the &ps; cluster.</para>
	  <para>
	    This is the first example of a parameter that supports the
	    environment mode. This means there are two different notations to
	    use this parameter. The first one may be used to define a single
	    node, the second one will allow to register more than one node
	    within a single command. You can assume the environment form of a
	    command as a convenience mode that prevents from typing the keyword
	    once per entry again and again.
	  </para>
	  <para>
	    Each entry has to have at least two items, the
	    <parameter><replaceable>hostname</replaceable></parameter> and the
	    <parameter><replaceable>id</replaceable></parameter>. This will
	    tell the &ps; system that the node called
	    <parameter><replaceable>hostname</replaceable></parameter> will act
	    as the physical node with &ps; ID
	    <parameter><replaceable>id</replaceable></parameter>.
	  </para>
	  <para>
	    <parameter><replaceable>hostname</replaceable></parameter> is
	    either a resolvable hostname or an IP address in dot notation (e.g.
	    192.168.1.17). <parameter><replaceable>id</replaceable></parameter>
	    is an integer number in the range from 0 to
	    <command>NrOfNodes</command>-1.
	  </para>
	  <para>
	    Further optional items as <option>HWtype-entry</option>,
	    <option>starter-entry</option> or <option>runJobs-entry</option>
	    may overrule the default values of the hardware type on the node,
	    the ability to start parallel jobs from this node or the
	    possibility to run processes on this node respectively. These entry
	    have the same syntax as the stand alone commands to set the
	    corresponding default value.
	  </para>
	  <!--
	  <para>
	    The optional item <command>extraIP</command> will assign the IP
	    address <parameter><replaceable>ip-addr</replaceable></parameter>
	    to the local Myrinet card.
	    <parameter><replaceable>ip-addr</replaceable></parameter> is either
	    a resolvable hostname or an IP address in dot notation (e.g.
	    192.168.1.17). For a detailed description on how this works refer
	    to <xref linkend="ip_over_myrinet"/> of the <emphasis
	      role="bold">&ps; Administrators Guide</emphasis>.
	  </para>
	  -->
	  <para>
	    E.g. the line
	  </para>
	  <programlisting>
	Node node17 16 HWType { ethernet myrinet } starter yes runJobs no
	  </programlisting>
	  <para>
	    will define the node <parameter>node17</parameter> to have the &ps;
	    ID 16. Furthermore it is expected to have Ethernet <emphasis
	      role="bold">and</emphasis> Myrinet communication interfaces. It
	    is allow to start parallel tasks from this node but the node itself
	    will not run any process of any parallel task (except the &ps;
	    logger processes of the tasks started on this node).
	  </para>
	  <!--
	  <note>
	    <para>
	      The optional <command>extraIP</command> item is only usefull
	      when configuring a Myrinet cluster where IP over Myrinet is
	      enabled.
	    </para>
	    <para>
	      It is also possible to assign IP addresses to Myrinet cards on
	      the different nodes in a general manner based on the &ps; IDs.
	      Use the <envar>PS_IPPREFIX</envar> environment parameter within
	      the <command>Hardware <option>myrinet</option></command>
	      declaration for this feature.
	    </para>
	  </note>
	  -->
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LicenseServer</command>
	    <arg choice="plain"><replaceable>hostname</replaceable></arg>
	    <command>, LicServer</command>
	    <arg choice="plain"><replaceable>hostname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell &ps; to use
	    <parameter><replaceable>hostname</replaceable></parameter> as the
	    machine where the &ps; license daemon <xref linkend="psld"/> should
	    run.
	  </para>
	  <para>
	    &ps; will try to start the license server on this machine if the
	    license ping is missing for too long. Therefore, the <citerefentry>
	      <refentrytitle>inetd</refentrytitle>
	      <manvolnum>8</manvolnum>
	    </citerefentry> has to be set up correctly on this node in order to
	    to enable autostarting the <xref linkend="psld"/>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LicenseFile</command>
	    <arg choice="plain"><replaceable>lic-file</replaceable></arg>
	    <command>, LicFile</command>
	    <arg choice="plain"><replaceable>lic-file</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon <xref linkend="psid"/> and the license
	    daemon <xref linkend="psld"/> to use
	    <filename><replaceable>lic-file</replaceable></filename> as the
	    license file.
	  </para>
	  <para>
	    Be aware of the fact that both, <xref linkend="psid"/> and <xref
	      linkend="psld"/>, need a correct license file.
	  </para>
	  <para>
	    <filename><replaceable>lic-file</replaceable></filename> may be a
	    absolute or relative path. Relative paths are looked up relative to
	    <filename><replaceable>InstallDir</replaceable>/config</filename>
	    and <filename><replaceable>InstallDir</replaceable></filename> in
	    this order. Furthermore the directory where the config-file resides
	    (which is <filename>/etc</filename> by default, but may be
	    overwritten with
	    <xref linkend="psid"/>'s and <xref linkend="psld"/>'s
	    <option>-f</option>  option) is investigated.
	  </para>
	  <para>
	    The default is <filename>license</filename>.
	  </para>
	  <note>
	    <para>
	      If <filename><replaceable>lic-file</replaceable></filename> is
	      a relative path, <command>InstallDir</command> has to be declared
	      beforehand, unless it is the default.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LicenseDeadInterval</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	    <command>, LicDeadInterval</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>The &ps; license daemon <xref linkend="psld"/> will shut down
	    operation after
	    <parameter><replaceable>num</replaceable></parameter> multicast
	    periods, if no multicast ping was received from any configured &ps;
	    daemon.
	  </para>
	  <para>
	    The default value is 30.
	  </para>
	  <para>
	    For now, the multicast period is set to two second, i.e. every
	    daemon sends a multicast ping every two seconds. This results into
	    shutting down the license daemon 1 minute after the last &ps;
	    daemon within the cluster has finished execution.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>SelectTime</command>
	    <arg choice="plain"><replaceable>time</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the timeout of the central <citerefentry>
	      <refentrytitle>select</refentrytitle>
	      <manvolnum>2</manvolnum>
	    </citerefentry> of the &ps; daemon <xref linkend="psid"/> to
	    <parameter><replaceable>time</replaceable></parameter> seconds.
	  </para>
	  <para>
	    The default value is 2 seconds.
	  </para>
	  <note>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>selecttime</option></command> directive within the &ps;
	      administration and management tool <xref linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>DeadInterval</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>The &ps; daemon <xref linkend="psid"/> will declare other
	    daemons as dead after
	    <parameter><replaceable>num</replaceable></parameter> consecutively
	    missing multicast pings.
	  </para>
	  <para>
	    After declaring a node as dead, all processes residing on this node
	    are also declared dead. This results in sending signals to all
	    processes on the local node that have requested to get informed
	    about the death of one of these processes.
	  </para>
	  <para>
	    The default value is 10.
	  </para>
	  <para>
	    For now, the multicast period is set to two second, i.e. every
	    daemon sends a multicast ping every two seconds. This results in
	    declaring a daemon as dead after 20 seconds for the default value.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LogLevel</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the debugging level of the &ps; daemon <xref
	      linkend="psid"/> to <option>num</option>.
	  </para>
	  <note>
	    <para>
	      For values of <option>level</option> larger than
	      <constant>10</constant> the daemon logs a huge amount of message
	      in the logging destination, which is usually the <citerefentry>
		<refentrytitle>syslog</refentrytitle>
		<manvolnum>3</manvolnum>
	      </citerefentry>. Don't use this levels different from
	      <constant>0</constant> for too long!
	    </para>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>psiddebug</option></command> directive within the &ps;
	      administration and management tool <xref linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LogDest</command>
	    <group choice="req">
	      <arg>LOG_DAEMON</arg>
	      <arg>LOG_KERN</arg>
	      <arg>LOG_LOCAL[0-7]</arg>
	    </group>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>LogDestination</command>
	    <group choice="req">
	      <arg>LOG_DAEMON</arg>
	      <arg>LOG_KERN</arg>
	      <arg>LOG_LOCAL[0-7]</arg>
	    </group>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the logging output's destination for the &ps; daemon
	    <xref linkend="psid"/>. Usually the daemon prints logging output
	    using the <citerefentry>
	      <refentrytitle>syslog</refentrytitle>
	      <manvolnum>3</manvolnum>
	    </citerefentry> mechanism, unless an alternative logging file is
	    requested via <xref linkend="psid"/>'s <option>-l</option> option.
	  </para>
	  <para>
	    In order to collect all the &ps; specific log messages into a
	    special file, the <replaceable>facility</replaceable> argument of
	    the <citerefentry>
	      <refentrytitle>openlog</refentrytitle>
	      <manvolnum>3</manvolnum>
	    </citerefentry> function call in cooperation with a suitable setup
	    of the <citerefentry>
	      <refentrytitle>syslogd</refentrytitle>
	      <manvolnum>8</manvolnum>
	    </citerefentry> may be used. This parameter will set the argument
	    to one of the mentioned values.
	  </para>
	  <para>
	    The defaul value is <command>LOG_DAEMON</command>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>MCastGroup</command>
	    <arg choice="plain"><replaceable>group-num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell <xref linkend="psid"/> and <xref linkend="psld"/> to use
	    the multicast group
	    <parameter><replaceable>group-num</replaceable></parameter> for
	    multicast communication to other daemons.
	  </para>
	  <para>
	    The default group to use is <constant>237</constant>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>MCastPort</command>
	    <arg choice="plain"><replaceable>port-num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell <xref linkend="psid"/> and <xref linkend="psld"/> to use
	    the UDP port
	    <parameter><replaceable>port-num</replaceable></parameter> for
	    multicast communication to other daemons.
	  </para>
	  <para>
	    The default port to use is <constant>1889</constant>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RDPPort</command>
	    <arg choice="plain"><replaceable>port-num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell <xref linkend="psid"/> to use the UDP port
	    <parameter><replaceable>port-num</replaceable></parameter> for RDP
	    communication to other daemons.
	  </para>
	  <para>
	    The default port to use is <constant>886</constant>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RLimit</command>
	    <group choice="req">
	      <arg>CPUTime <replaceable>time</replaceable></arg>
	      <arg>DataSize <replaceable>size</replaceable></arg>
	      <arg>StackSize <replaceable>size</replaceable></arg>
	      <arg>RSSize <replaceable>size</replaceable></arg>
	    </group>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>RLimit {</command>
	    <group choice="req" rep="repeat">
	      <arg>CPUTime <replaceable>time</replaceable></arg>
	      <arg>DataSize <replaceable>size</replaceable></arg>
	      <arg>StackSize <replaceable>size</replaceable></arg>
	      <arg>RSSize <replaceable>size</replaceable></arg>
	    </group>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set various resource limits to the <xref linkend="psid"/> and
	    thus to all processes started from it.
	  </para>
	  <para>
	    All limits are set using the <citerefentry>
	      <refentrytitle>setrlimit</refentrytitle>
	      <manvolnum>2</manvolnum>
	    </citerefentry> system call. For a detailed description of the
	    different types of limits please refer to the corresponding manual
	    page.
	  </para>
	  <para>
	    If no RLimits are set within the &ps; configuration files, no
	    changes are made to the systems default value.
	  </para>
	  <para>
	    The following (soft) resource limits may be set:
	  </para>
	  <variablelist>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>CPUTime</command>
		  <arg choice="req"><replaceable>time</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum CPU time that might be consumed by the
		  daemon to
		  <parameter><replaceable>time</replaceable></parameter>
		  seconds.
		  <parameter><replaceable>time</replaceable></parameter> has to
		  be an integer number, the string <quote>infinity</quote> or
		  the string <quote>unlimited</quote>. In the two latter cases
		  the data size is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>DataSize</command>
		  <arg choice="req"><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum data size to
		  <parameter><replaceable>size</replaceable></parameter> bytes.
		  <parameter><replaceable>size</replaceable></parameter> is an
		  integer number, the string <quote>infinity</quote> or the
		  string <quote>unlimited</quote>. In the two latter cases the
		  data size is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>StackSize</command>
		  <arg choice="req"><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum stack size to
		  <parameter><replaceable>size</replaceable></parameter> bytes.
		  <parameter><replaceable>size</replaceable></parameter> is an
		  integer number, the string <quote>infinity</quote> or the
		  string <quote>unlimited</quote>. In the two latter cases the
		  stack is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>RSSize</command>
		  <arg choice="req"><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum Resident Set Size (RSS) to
		  <parameter><replaceable>size</replaceable></parameter> bytes.
		  <parameter><replaceable>size</replaceable></parameter> is an
		  integer number, the string <quote>infinity</quote> or the
		  string <quote>unlimited</quote>. In the two latter cases the
		  RSS is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Env[ironment]</command>
	    <arg choice="plain"><replaceable>name</replaceable></arg>
	    <arg choice="plain"><replaceable> value</replaceable></arg>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>Env[ironment] {</command>
	    <arg choice="plain">{<replaceable>name</replaceable></arg>
	    <arg choice="plain"><replaceable> value</replaceable></arg>
	    <arg choice="plain">}...</arg>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Set environment variables for the &ps; daemon <xref
	      linkend="psid"/> and any application started via this daemon.
	  </para>
	  <para>
	    This command again has two different mode. While within the first
	    form exactly one variable is set, within the environment form of
	    this command as many variables as wanted may be set. The general
	    form of the latter case is one variable per line.
	  </para>
	  <para>
	    The <replaceable>value</replaceable> part of each line either is a
	    single word or an expression enclosed by single or double quotes.
	    The expression might contain whitespace characters. If the
	    expression is enclosed by single quotes, it is allowed to use
	    balanced or unbalanced double quotes within this expression and
	    vice verse.
	  </para>
	  <para>
	    This command might be used for example in order to set the
	    <envar>PSP_NETWORK</envar> environment variable globally without
	    the need of every user to adjust this parameter in his own
	    environment.
	  </para>
	</listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Errors</title>
    <para>
      No known errors.
    </para>
  </refsect1>

  <refsect1>
    <title>See also</title>
    <para>
      <xref linkend="psid"/>, <xref linkend="psld"/>
    </para>
  </refsect1>
</refentry>
  <!-- Keep this comment at the end of the file
  Local variables:
  mode: xml
  sgml-omittag:nil
  sgml-shorttag:nil
  sgml-namecase-general:nil
  sgml-general-insert-case:lower
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("adminguide.xml" "book" "reference" "reference" ("title"))
  sgml-exposed-tags:nil
  sgml-local-catalogs:nil
  sgml-local-ecat-files:nil
  End:
  -->
