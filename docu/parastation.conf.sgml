<refentry id="parastation_conf">

  <refmeta>
    <refentrytitle>parastation.conf</refentrytitle>
    <manvolnum>5</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>parastation.conf</refname>
    <refname>psm.config</refname>
    <refpurpose>the &ps; configuration file</refpurpose>
  </refnamediv>

  <refsect1><title>Description</title>
    <para>
      Upon execution, the &ps; daemon <xref linkend="psid"/> and the &ps;
      license daemon <xref linkend="psld"/> read their configuration
      information from a configuration file which, by default, is
      <filename>/etc/parastation.conf</filename>. There are various parameter
      that can be modified persistently within this configuration file.
    </para>
    <para>
      The main syntax of the configuration file is one parameter per line. Due
      to ease of use there are some parameters, e.g. <command>Nodes</command>,
      that are implemented in an environment mode. This mode enables to set
      more than one parameter within a command. Environment mode parameters may
      last longer than one line.
    </para>
    <para>
      Comments are denoted by a "#" at the beginning of a line or a "#"
      followed by an withspace character (i.e. space or tab) somewhere in the
      middle of a line. Comments end at the end of a line.
    </para>
    <!-- @todo Continuation of lines. Not implemented yet -->
    <para>
      The parser used to analyze <filename>parastation.conf</filename> is
      <emphasis role="bold">not</emphasis> case sensitive. This means, that all
      keywords within the configuration file may be written in any combination
      of upper- and lowercase characters. Within this document a mixed
      upper-/lowercase notation is used to provide more readable keywords. The
      same notation is used in the configuration file template
      <filename>parastation.conf.tmpl</filename> contained in the distributed
      &ps; system. The template file can be found in
      <filename>/opt/parastation/config</filename>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
      The different parameters are discussed in the order they should appear in
      within the configuration file. Dependencies between parameters -
      resulting in a defined order of parameters - are marked explicitely.
    </para>
    <para>
      Some parameters may be modified using different keywords, e.g. both
      <command>InstallDir</command> and <command>InstallationDir</command>
      modify the directory where the &ps; daemon <xref linkend="psid"/> expects
      the &ps; system installed. In case of different keywords modifying the
      same resource, all keywords are mentioned in front of the parameter's
      discussion.
    </para>
    <para>
      Very few parameters have to be declared in any case in order to enable
      &ps; to run on a cluster. These parameters are
      <command>NrOfNodes</command>, <command>HWType</command>,
      <command>Nodes</command> and <command>LicenseServer</command>. In the
      case of a Myrinet cluster <command>MyrinetModule</command> and
      <command>Routingfile</command> have also to be declared.
    </para>
    <para>
      If parameters are declared more than once, the latest declaration is the
      one to use. Do not make use of this behavior as a feature since it may
      create great pitfalls.
    </para>
    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>InstallDir</command>
	    <arg choice="plain"><replaceable>inst-dir</replaceable></arg>
	    <command>, InstallationDir</command>
	    <arg choice="plain"><replaceable>inst-dir</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon to find all the &ps; stuff in
	    <filename><replaceable>inst-dir</replaceable></filename>. The
	    default is <filename>/opt/parastation</filename>.
	  </para>
	  <note>
	    <para>
	      The installation directory has to be declared before any of
	      <command>LicenseFile</command>, <command>MyrinetModule</command>,
	      <command>RoutingFile</command> or <command>IPModule</command> is
	      used.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>NrOfNodes</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Define the number of connected nodes including the frontend
	    node. The nodes will be numbered 0 &hellip;
	    <parameter><replaceable>num</replaceable></parameter>-1.
	  </para>
	  <note>
	    <para>
	      There is no default value for <command>NrOfNodes</command>.
	      <command>NrOfNodes</command> has to be declare within the
	      configuration file in any case.
	    </para>
	    <para>
	      The number of connected nodes has to be declared before any
	      <command>Nodes</command>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>HWType</command>
	    <group choice="req">
	      <arg>Ethernet</arg>
	      <arg>Myrinet</arg>
<!-- 	      <arg>GigaEthernet</arg> -->
	      <arg>None</arg>
	    </group>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>HWType {</command>
	    <group rep="repeat" choice="req">
	      <arg>Ethernet</arg>
	      <arg>Myrinet</arg>
<!-- 	      <arg>GigaEthernet</arg> -->
	      <arg>None</arg>
	    </group>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Define the default communication hardware available on the
	    nodes of the &ps; cluster. This may be overruled by an explicit
	    <option>HWType</option> option in a <command>Node</command>
	    statement.
	  </para>
	  <para>
	    Available hardware types are:
	  </para>
	  <variablelist>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>Ethernet</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use classical TCP/IP communication over Ethernet via an
		  optimized MPI implementation.
		</para>
		<para>
		  This is only available within &psfe;.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>Myrinet</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Use optimized communication over Myrinet.</para>
		<para>
		  This is only available within &ps; 3.
		</para>
	      </listitem>
	    </varlistentry>

<!-- 	    <varlistentry> -->
<!-- 	      <term> -->
<!-- 		<cmdsynopsis> -->
<!-- 		  <command>GigaEthernet</command> -->
<!-- 		</cmdsynopsis> -->
<!-- 	      </term> -->
<!-- 	      <listitem> -->
<!-- 		<para>Use optimized communication via Gigabit Ethernet.</para> -->
<!-- 		<para> -->
<!-- 		  This is only available within &ps; 4. -->
<!-- 		</para> -->
<!-- 	      </listitem> -->
<!-- 	    </varlistentry> -->

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>None</command>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>No communication hardware at all.</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	  <para>
	    It is possible to enable more than one hardware type, either as
	    default or on a per node basis. Think of a node that has both, a
	    Myrinet and a Fast Ethernet card. Furthermore the cluster contains
	    nodes that lack Myrinet. Then it might be useful to run jobs only
	    depending on Ethernet communication even on nodes that have a
	    Myrinet card in order to talk to nodes that don't have one. The
	    corresponding <command>HWType</command> declaration reads
	    <command>HWType {<parameter>Myrinet</parameter>
	      <parameter>Ethernet</parameter> }</command>.
	  </para>
	  <para>
	    The default value of <command>HWType</command> is
	    <parameter>None</parameter>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>hasIP</command>
	    &boolargs;
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>If the argument is one of <parameter>yes</parameter>,
	    <parameter>true</parameter> or <parameter>1</parameter> all nodes
	    declared within a <command>Node</command> statement will load the
	    &ps; IP module in order to enable TCP/IP over Myrinet, unless
	    otherwise stated within the <command>Node</command> statement.
	  </para>
	  <para>
	    If the argument is one of <parameter>no</parameter>,
	    <parameter>false</parameter> or <parameter>0</parameter> TCP/IP
	    over Myrinet will be disabled, unless otherwise stated.
	  </para>
	  <para>
	    The default is to disable TCP/IP over Myrinet.
	  </para>
	  <note>
	    <para>This parameter is only useful when configuring a Myrinet
	      cluster.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>starter</command>
	    &boolargs;
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>If the argument is one of <parameter>yes</parameter>,
	    <parameter>true</parameter> or <parameter>1</parameter> all nodes
	    declared within a <command>Node</command> statement will allow to
	    start parallel tasks, unless otherwise stated.
	  </para>
	  <para>
	    If the argument is one of <parameter>no</parameter>,
	    <parameter>false</parameter> or <parameter>0</parameter> starting
	    will be not allowed.
	  </para>
	  <para>
	    It might be useful to prohibit the startup of parallel task from
	    the frontend machine if a batch system is used. This will force all
	    users to use the batch system in order to start their tasks.
	    Otherwise it would be possible to circumvent the batch system by
	    starting parallel task directly from the frontend machine.
	  </para>
	  <para>
	    The default is to allow the starting of parallel tasks from all
	    nodes.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Node[s]</command>
	    <arg choice="plain"><replaceable>hostname</replaceable></arg>
	    <arg choice="plain"><replaceable>id</replaceable></arg>
	    <arg>HWtype-entry</arg>
	    <arg>hasIP-entry</arg>
	    <arg>starter-entry</arg>
	    <arg>MyrinetIP <replaceable>ip-addr</replaceable></arg>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>Node[s] {</command>
	    <arg choice="plain">{<replaceable>hostname</replaceable></arg>
	    <arg choice="plain"><replaceable>id</replaceable></arg>
	    <arg>HWtype-entry</arg>
	    <arg>hasIP-entry</arg>
	    <arg>starter-entry</arg>
	    <arg>MyrinetIP <replaceable>ip-addr</replaceable></arg>
	    <arg choice="plain">}...</arg>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Define one or more nodes to be part of the &ps; cluster.</para>
	  <para>
	    This is the first example of a parameter that supports the
	    environment mode. This means there are two different notations to
	    use this parameter. The first one may be used to define a single
	    node, the second one will allow to register more than one node
	    within a single command. You can assume the environment form of a
	    command as a convenience mode that prevents from typing the keyword
	    once per entry again and again.
	  </para>
	  <para>
	    Each entry has to have at least two items, the
	    <parameter><replaceable>hostname</replaceable></parameter> and the
	    <parameter><replaceable>id</replaceable></parameter>. This will
	    tell the &ps; system that the node called
	    <parameter><replaceable>hostname</replaceable></parameter> will act
	    as the physical node with &ps; ID
	    <parameter><replaceable>id</replaceable></parameter>.
	  </para>
	  <para>
	    <parameter><replaceable>hostname</replaceable></parameter> is
	    either a resolvable hostname or an IP address in dot notation (e.g.
	    192.168.1.17). <parameter><replaceable>id</replaceable></parameter>
	    is an integer number in the range from 0 to
	    <command>NrOfNodes</command>-1.
	  </para>
	  <para>
	    Further optional items as <option>HWtype-entry</option>,
	    <option>hasIP-entry</option> and <option>starter-entry</option> may
	    overrule the default values of the hardware type on the node, the
	    existence of the IP over Myrinet feature and the ability to start
	    parallel jobs from this node respectively. These entry have the
	    same syntax as the stand alone commands to set the corresponding
	    default value.
	  </para>
	  <para>
	    The optional item <command>MyrinetIP</command> will assign the IP
	    address <parameter><replaceable>ip-addr</replaceable></parameter>
	    to the local Myrinet card.
	    <parameter><replaceable>ip-addr</replaceable></parameter> is either
	    a resolvable hostname or an IP address in dot notation (e.g.
	    192.168.1.17). For a detailed description on how this works refer
	    to <xref linkend="ip_over_myrinet"/> of the <emphasis
	      role="bold">&ps; Administrators Guide</emphasis>.
	  </para>
	  <para>
	    E.g. the line
	  </para>
	  <programlisting>
	Node node17 16 HWType { ethernet myrinet } hasIP yes MyrinetIP myri17
	  </programlisting>
	  <para>
	    will define the node <parameter>node17</parameter> to have the &ps;
	    ID 16. Furthermore it is expected to have Ethernet <emphasis
	      role="bold">and</emphasis> Myrinet communication interfaces and
	    the IP over Myrinet functionality will be activated on this node.
	    The IP address of the Myrinet card will be the one
	    <parameter>myri17</parameter> resolves to.
	  </para>
	  <note>
	    <para>
	      The optional <command>MyrinetIP</command> item is only usefull
	      when configuring a Myrinet cluster where IP over Myrinet is
	      enabled.
	    </para>
	    <para>
	      It is also possible to assign IP addresses to Myrinet cards on
	      the different nodes in a general manner based on the &ps; IDs.
	      Use the <command>IPPrefix</command> parameter for this feature.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LicenseServer</command>
	    <arg choice="plain"><replaceable>hostname</replaceable></arg>
	    <command>, LicServer</command>
	    <arg choice="plain"><replaceable>hostname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell &ps; to use
	    <parameter><replaceable>hostname</replaceable></parameter> as the
	    machine where the &ps; license daemon <xref linkend="psld"/> should
	    run.
	  </para>
	  <para>
	    &ps; will try to start the license server on this machine if the
	    license ping is missing for too long. Therefore, the <citerefentry>
	      <refentrytitle>inetd</refentrytitle>
	      <manvolnum>8</manvolnum>
	    </citerefentry> has to be set up correctly on this node in order to
	    to enable autostarting the <xref linkend="psld"/>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LicenseFile</command>
	    <arg choice="plain"><replaceable>lic-file</replaceable></arg>
	    <command>, LicFile</command>
	    <arg choice="plain"><replaceable>lic-file</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon <xref linkend="psid"/> and the license
	    daemon <xref linkend="psld"/> to use
	    <filename><replaceable>lic-file</replaceable></filename> as the
	    license file.
	  </para>
	  <para>
	    Be aware of the fact that both, <xref linkend="psid"/> and <xref
	      linkend="psld"/>, need a correct license file.
	  </para>
	  <para>
	    <filename><replaceable>lic-file</replaceable></filename> may be a
	    absolute or relative path. Relative paths are looked up relative to
	    <filename><replaceable>InstallDir</replaceable>/config</filename>
	    and <filename><replaceable>InstallDir</replaceable></filename> in
	    this order. Furthermore the directory where the config-file resides
	    (which is <filename>/etc</filename> by default, but may be
	    overwritten with
	    <xref linkend="psid"/>'s and <xref linkend="psld"/>'s
	    <option>-f</option>  option) is investigated.
	  </para>
	  <para>
	    The default is <filename>license</filename>.
	  </para>
	  <note>
	    <para>
	      If <filename><replaceable>lic-file</replaceable></filename> is
	      a relative path, <command>InstallDir</command> has to be declared
	      beforehand, unless it is the default.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LicenseDeadInterval</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	    <command>, LicDeadInterval</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>The &ps; license daemon <xref linkend="psld"/> will shut down
	    operation after
	    <parameter><replaceable>num</replaceable></parameter> multicast
	    periods, if no multicast ping was received from any configured &ps;
	    daemon.
	  </para>
	  <para>
	    The default value is 30.
	  </para>
	  <para>
	    For now, the multicast period is set to two second, i.e. every
	    daemon sends a multicast ping every two seconds. This results into
	    shutting down the license daemon 1 minute after the last &ps;
	    daemon within the cluster has finished execution.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>MyrinetModule</command>
	    <arg choice="plain"><replaceable>mod-file</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon <xref linkend="psid"/> to use
	    <filename><replaceable>mod-file</replaceable></filename> as the
	    Myrinet kernel module.
	  </para>
	  <para>
	    <filename><replaceable>mod-file</replaceable></filename> may be a
	    absolute or relative path. Relative paths are looked up relative to
	    <filename><replaceable>InstallDir</replaceable>/bin/modules</filename> 
	    and <filename><replaceable>InstallDir</replaceable></filename> in
	    this order.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      There is no default value for <command>MyrinetModule</command>.
	      <command>MyrinetModule</command> has to be declared within the
	      configuration file in any case for a Myrinet cluster.
	    </para>
	    <para>
	      If <filename><replaceable>mod-file</replaceable></filename> is
	      a relative path, <command>InstallDir</command> has to be declared
	      beforehand, unless it is the default.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RoutingFile</command>
	    <arg choice="plain"><replaceable>route-file</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon <xref linkend="psid"/> to use
	    <filename><replaceable>route-file</replaceable></filename> as the
	    Myrinet routing file.
	  </para>
	  <para>
	    <filename><replaceable>route-file</replaceable></filename> may be
	    a absolute or relative path. Relative paths are looked up relative
	    to
	    <filename><replaceable>InstallDir</replaceable>/config</filename> 
	    and <filename><replaceable>InstallDir</replaceable></filename> in
	    this order.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      There is no default value for <command>RoutingFile</command>.
	      <command>RoutingFile</command> has to be declared within the
	      configuration file in any case for a Myrinet cluster.
	    </para>
	    <para>
	      If <filename><replaceable>route-file</replaceable></filename>
	      is a relative path, <command>InstallDir</command> has to be
	      declared beforehand, unless it is the default.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>SmallPacketSize</command>
	    <arg choice="plain"><replaceable>size</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the the maximum size of PIO packets to
	    <parameter><replaceable>size</replaceable></parameter> bytes.
	  </para>
	  <para>
	    PIO packets are send directly to the node's memory by the <link
	      linkend="MCP">MCP</link> and copied by a <citerefentry>
	      <refentrytitle>memcpy</refentrytitle>
	      <manvolnum>3</manvolnum>
		    </citerefentry> into the final destination. Non-PIO packets
	    are send via <link linkend="DMA">DMA</link> immediately to their
	    final destination.
	  </para>
	  <para>
	    The default value is 250 byte.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>smallpacketsize</option></command> directive within the
	      &ps; administration and management tool <xref
		linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>ResendTimeout</command>
	    <arg choice="plain"><replaceable>time</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the retansmission timeout to
	    <parameter><replaceable>time</replaceable></parameter>
	    microseconds.
	  </para>
	  <para>
	    If a packet sent by &ps; to another node is not acknowledged for
	    this period of time, it will be resend to this node.
	  </para>
	  <para>
	    The default value is 2048 microseconds.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      In the current version of &ps; this parameter is fixed and cannot
	      be modified. This might change in the future.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>HNPend</command>
	    <arg choice="plain"><replaceable>val</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the number of pending host notify messages to
	    <parameter><replaceable>val</replaceable></parameter>.
	  </para>
	  <para>
	    Host notify messages are send by the <link linkend="MCP">MCP</link>
	    to the kernel to mark send buffers as free. This is done when data
	    that was sent successfully via this buffer was acknowledged by the
	    destination node.
	  </para>
	  <para>
	    Usually not every free buffer is communicated, but the <link
	      linkend="MCP">MCP</link> waits until several buffers are freed
	    and sends accumulated host notify messages then.
	    <parameter><replaceable>val</replaceable></parameter> is the number
	    of accumulated messages to sent simultaniously.
	  </para>
	  <para>
	    The default value is 2.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      <option>val</option> has to be choosen as 0 &lt;=
	      <option>val</option> &lt; 3. Small values lead to more traffic on
	      the PCI bus, but prevent free send buffers on the Myrinet card
	      from not being used. Values larger than 3 have empirically proven
	      to do a disservice.
	    </para>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>hnpend</option></command> directive within the &ps;
	      administration and management tool <xref linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>ACKPend</command>
	    <arg choice="plain"><replaceable>val</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the number of pending acknowledgements to
	    <parameter><replaceable>val</replaceable></parameter>.
	  </para>
	  <para>
	    &ps; usually does not send acknowledgements immediately but waits
	    for some pending ACK messages and sends them accumulated.
	  </para>
	  <para>
	    If a packet is not acknowledged for some microseconds (the actual
	    value can be set using the parameter
	    <command>ResendTimeout</command>) it will be resend by the source
	    node. If a packet is received twice by the destination node, an
	    immediate ACK message is sent and therefore correct delivery of
	    packets is ensured.
	  </para>
	  <para>
	    The default value is 1.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      <option>val</option> has to be choosen as 0 &lt;=
	      <option>val</option> &lt; 3. Small values lead to more ACK
	      messages, but prevent from to many resends. Values larger than 3
	      have empirically proven to do a disservice.
	    </para>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>ackpend</option></command> directive within the &ps;
	      administration and management tool <xref linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>IPModule</command>
	    <arg choice="plain"><replaceable>mod-file</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell the &ps; daemon <xref linkend="psid"/> to use
	    <filename><replaceable>mod-file</replaceable></filename> as the IP
	    over Myrinet kernel module.
	  </para>
	  <para>
	    <filename><replaceable>mod-file</replaceable></filename> may be a
	    absolute or relative path. Relative paths are looked up relative to
	    <filename><replaceable>InstallDir</replaceable>/bin/modules</filename> 
	    and <filename><replaceable>InstallDir</replaceable></filename> in
	    this order.
	  </para>
	  <para>
	    If IPModule is not given within the configuration file, the &ps;
	    daemon <xref linkend="psid"/> will try to find the kernel module
	    anyhow. The place to look at is
	    <filename><replaceable>InstallDir</replaceable>/bin/modules/<replaceable>arch</replaceable>_Linux_<replaceable>version</replaceable></filename>, 
	    where <parameter><replaceable>arch</replaceable></parameter> is the
	    hardware architecture (usually one of 'i386' and 'alpha') and
	    <parameter><replaceable>version</replaceable></parameter> the
	    kernel version in use.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      If <filename><replaceable>mod-file</replaceable></filename> is
	      a relative path, <command>InstallDir</command> has to be declared
	      beforehand, unless it is the default.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>IPPrefix</command>
	    <arg choice="plain"><replaceable>prefix</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell &ps; the prefix to build IP addresses from &ps; IDs. For a
	    detailed description on how this works refer to
	    <xref
	      linkend="ip_over_myrinet"/> of the <emphasis role="bold">&ps;
	      Administrators Guide</emphasis>.
	  </para>
	  <para>
	    <replaceable>prefix</replaceable> is expected to be in the ordinary
	    dot notation for IP addresses (i.e. something like
	    '192.168.16.0'). Trailing zero may be omitted, so '192.168.16' is
	    also valid and leads to the same result as '192.168.16.0'.
	  </para>
	  <para>
	    The number of bits used from the <replaceable>prefix</replaceable>
	    is biased by the <command>IPPrefixLen</command> parameter. Assuming
	    a prefix length of 20 bits, '192.168.16' and '192.168.17' will lead
	    to the same result since the 20 most significant bits of both
	    addresses are identical.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	    <para>
	      There is no default value for
	      <command>IPPrefix</command>. <command>IPPrefix</command> has to
	      be declared within the configuaration file in any case if IP over
	      Myrinet should be enabled on a Myrinet cluster.
	    </para>
	    <para>
	      It is also possible to assign IP addresses to Myrinet cards on
	      the different nodes on a per node basis. Use the
	      <option>MyrinetIP</option> option of the <command>Nodes</command>
	      parameter for this feature.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>IPPrefixLen</command>
	    <arg choice="plain"><replaceable>len</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell &ps; the number of valid bits within the prefix used to
	    build IP addresses from &ps; IDs. The prefix may be defined using
	    the <command>IPPrefix</command> parameter.
	  </para>
	  <para>
	    <replaceable>len</replaceable> is measured in bits.
	  </para>
	  <para>
	    The default value is 20.
	  </para>
	  <note>
	    <para>
	      This parameter is only useful when configuring a Myrinet cluster.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>SelectTime</command>
	    <arg choice="plain"><replaceable>time</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the timeout of the central <citerefentry>
	      <refentrytitle>select</refentrytitle>
	      <manvolnum>2</manvolnum>
	    </citerefentry> of the &ps; daemon <xref linkend="psid"/> to
	    <parameter><replaceable>time</replaceable></parameter> seconds.
	  </para>
	  <para>
	    The default value is 2 seconds.
	  </para>
	  <note>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>selecttime</option></command> directive within the &ps;
	      administration and management tool <xref linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>DeadInterval</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>The &ps; daemon <xref linkend="psid"/> will declare other
	    daemons as dead after
	    <parameter><replaceable>num</replaceable></parameter> consecutively
	    missing multicast pings.
	  </para>
	  <para>
	    After declaring a node as dead, all processes residing on this node
	    are also declared dead. This results in sending signals to all
	    processes on the local node that have requested to get informed
	    about the death of one of these processes.
	  </para>
	  <para>
	    The default value is 10.
	  </para>
	  <para>
	    For now, the multicast period is set to two second, i.e. every
	    daemon sends a multicast ping every two seconds. This results in
	    declaring a daemon as dead after 20 seconds for the default value.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LogLevel</command>
	    <arg choice="plain"><replaceable>num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the debugging level of the &ps; daemon <xref
	      linkend="psid"/> to <option>num</option>.
	  </para>
	  <note>
	    <para>
	      For values of <option>level</option> larger than
	      <constant>10</constant> the daemon logs a huge amount of message
	      in the logging destination, which is usually the <citerefentry>
		<refentrytitle>syslog</refentrytitle>
		<manvolnum>3</manvolnum>
	      </citerefentry>. Don't use this levels different from
	      <constant>0</constant> for too long!
	    </para>
	    <para>
	      This parameter can be set during runtime via the <command>set
		<option>psiddebug</option></command> directive within the &ps;
	      administration and management tool <xref linkend="psiadmin"/>.
	    </para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>LogDest</command>
	    <group choice="req">
	      <arg>LOG_DAEMON</arg>
	      <arg>LOG_KERN</arg>
	      <arg>LOG_LOCAL[0-7]</arg>
	    </group>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>LogDestination</command>
	    <group choice="req">
	      <arg>LOG_DAEMON</arg>
	      <arg>LOG_KERN</arg>
	      <arg>LOG_LOCAL[0-7]</arg>
	    </group>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set the logging output's destination for the &ps; daemon
	    <xref linkend="psid"/>. Usually the daemon prints logging output
	    using the <citerefentry>
	      <refentrytitle>syslog</refentrytitle>
	      <manvolnum>3</manvolnum>
	    </citerefentry> mechanism, unless an alternative logging file is
	    requested via <xref linkend="psid"/>'s <option>-l</option> option.
	  </para>
	  <para>
	    In order to collect all the &ps; specific log messages into a
	    special file, the <replaceable>facility</replaceable> argument of
	    the <citerefentry>
	      <refentrytitle>openlog</refentrytitle>
	      <manvolnum>3</manvolnum>
	    </citerefentry> function call in cooperation with a suitable setup
	    of the <citerefentry>
	      <refentrytitle>syslogd</refentrytitle>
	      <manvolnum>8</manvolnum>
	    </citerefentry> may be used. This parameter will set the argument
	    to one of the mentioned values.
	  </para>
	  <para>
	    The defaul value is <command>LOG_DAEMON</command>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>MCastGroup</command>
	    <arg choice="plain"><replaceable>group-num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell <xref linkend="psid"/> and <xref linkend="psld"/> to use
	    the multicast group
	    <parameter><replaceable>group-num</replaceable></parameter> for
	    multicast communication to other daemons.
	  </para>
	  <para>
	    The default group to use is <constant>237</constant>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>MCastPort</command>
	    <arg choice="plain"><replaceable>port-num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell <xref linkend="psid"/> and <xref linkend="psld"/> to use
	    the UDP port
	    <parameter><replaceable>port-num</replaceable></parameter> for
	    multicast communication to other daemons.
	  </para>
	  <para>
	    The default port to use is <constant>1889</constant>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RDPPort</command>
	    <arg choice="plain"><replaceable>port-num</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Tell <xref linkend="psid"/> to use the UDP port
	    <parameter><replaceable>port-num</replaceable></parameter> for RDP
	    communication to other daemons.
	  </para>
	  <para>
	    The default port to use is <constant>886</constant>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RLimit</command>
	    <group choice="req">
	      <arg>CPUTime <replaceable>time</replaceable></arg>
	      <arg>DataSize <replaceable>size</replaceable></arg>
	      <arg>StackSize <replaceable>size</replaceable></arg>
	      <arg>RSSize <replaceable>size</replaceable></arg>
	    </group>
	  </cmdsynopsis>
	  <cmdsynopsis>
	    <command>RLimit {</command>
	    <group choice="req" rep="repeat">
	      <arg>CPUTime <replaceable>time</replaceable></arg>
	      <arg>DataSize <replaceable>size</replaceable></arg>
	      <arg>StackSize <replaceable>size</replaceable></arg>
	      <arg>RSSize <replaceable>size</replaceable></arg>
	    </group>
	    <command>}</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>Set various resource limits to the <xref linkend="psid"/> and
	    thus to all processes started from it.
	  </para>
	  <para>
	    All limits are set using the <citerefentry>
	      <refentrytitle>setrlimit</refentrytitle>
	      <manvolnum>2</manvolnum>
	    </citerefentry> system call. For a detailed description of the
	    different types of limits please refer to the corresponding manual
	    page.
	  </para>
	  <para>
	    If no RLimits are set within the &ps; configuration files, no
	    changes are made to the systems default value.
	  </para>
	  <para>
	    The following (soft) resource limits may be set:
	  </para>
	  <variablelist>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>CPUTime</command>
		  <arg choice="req"><replaceable>time</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum CPU time that might be consumed by the
		  daemon to
		  <parameter><replaceable>time</replaceable></parameter>
		  seconds.
		  <parameter><replaceable>time</replaceable></parameter> has to
		  be an integer number, the string <quote>infinity</quote> or
		  the string <quote>unlimited</quote>. In the two latter cases
		  the data size is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>DataSize</command>
		  <arg choice="req"><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum data size to
		  <parameter><replaceable>size</replaceable></parameter> bytes.
		  <parameter><replaceable>size</replaceable></parameter> is an
		  integer number, the string <quote>infinity</quote> or the
		  string <quote>unlimited</quote>. In the two latter cases the
		  data size is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>StackSize</command>
		  <arg choice="req"><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum stack size to
		  <parameter><replaceable>size</replaceable></parameter> bytes.
		  <parameter><replaceable>size</replaceable></parameter> is an
		  integer number, the string <quote>infinity</quote> or the
		  string <quote>unlimited</quote>. In the two latter cases the
		  stack is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <command>RSSize</command>
		  <arg choice="req"><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Set the maximum Resident Set Size (RSS) to
		  <parameter><replaceable>size</replaceable></parameter> bytes.
		  <parameter><replaceable>size</replaceable></parameter> is an
		  integer number, the string <quote>infinity</quote> or the
		  string <quote>unlimited</quote>. In the two latter cases the
		  RSS is set to RLIM_INFINITY.
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>

      <!-- @todo Implement and document this parameter -->
      <!-- 
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Environment</command>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <note>
	    <para>
	      NOT YET IMPLEMENTED !
	    </para>
	  </note>
	</listitem>
      </varlistentry>
      -->

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Errors</title>
    <para>
      <!-- @todo Implement this parameters -->
      The commands <command>hasIP</command>, <command>IPModule</command>,
      <command>IPPrefix</command> and <command>IPPrefixLen</command> are not
      implemented yet.
    </para>
  </refsect1>

  <refsect1>
    <title>See also</title>
    <para>
      <xref linkend="psid"/>, <xref linkend="psld"/>
    </para>
  </refsect1>
</refentry>
  <!-- Keep this comment at the end of the file
  Local variables:
  mode: xml
  sgml-omittag:nil
  sgml-shorttag:nil
  sgml-namecase-general:nil
  sgml-general-insert-case:lower
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("adminguide.xml" "book" "reference" "reference" ("title"))
  sgml-exposed-tags:nil
  sgml-local-catalogs:nil
  sgml-local-ecat-files:nil
  End:
  -->
