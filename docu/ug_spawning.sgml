<chapter id="userguide_spawing">
  <title>Strategy for spawning processes within &ps;</title>

  <para>
    The spawning of processes for a parallel task within &ps; can be
    biased by various environment variables. Setting this variables is
    optional, if not set, the default behavior will make sure, that
    the usability of the cluster will not be jeopardized.
  </para>
  <para>
    As long as overbooking of CPUs is not explicitely required, the
    algorithm will ensure, that only one process per CPU is spawned.
    This behavior ensures that parallel applications will influence
    each other as minimal as possible.
  </para>
  <para>
    If no environment variables are set, &ps; tries to select
    nodes, where fewest compute processes are running. Typically,
    <!-- TODO: fg: processes are compute processes! -->
    this nodes are unused. On this nodes, processes are spawned in
    manner, that consecutive ranks are placed on the same node, if
    possible. If there are not enough CPUs available, the spawning
    facility will <emphasis role="bold">not</emphasis> wait for free
    CPUs and will also <emphasis role="bold">not</emphasis> overbook
    CPUs.
  </para>

  <section>
    <title>Pre-defined node selection</title>
    <para>
      While starting up a parallel task, the following environment
      variables control the creation of the temporary
      node list used internally for spawning processes. Defining one of
      these variables enable the user to control the placement of
      processes. Likewise, batch systems might use this variables to
      place parallel jobs on dedicated nodes.
    </para>

    <!-- TODO: fg: what about PBS, LSF vars? -->
    <variablelist>
      <varlistentry>
        <term><envar>PSI_NODES</envar></term>
        <listitem>
          <para>
            Contains a comma separated list of node id ranges. Each
            node id range consists of a single node id (numerical
            value) or
            a range of node ids, including both the first and last id
            noted and separated by a &dash;. 
          </para>
	  <para>
	    E.g. defining the environment variable
	  </para>
	  <programlisting>
  PSI_NODES="0,1,3,17-20"    # must be exported!
	  </programlisting>
	  <para>
	    will enable the nodes with IDs 0, 1, 3 and 17 up to 20 to form the
	    partition that is used by all subsequent parallel task.
	  </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><envar>PSI_HOSTS</envar></term>
        <listitem>
          <para>
            contains a list of host names, separated by white spaces.
          </para>
	  <para>
	    Defining the environment variable
	  </para>
	  <programlisting>
  PSI_HOSTS="node0 node1 node3 node17 node18 node19 node20"
	  </programlisting>
	  <para>
	    will enable the nodes 0, 1, 3 and 17 up to 20 to form the
	    partition that is used by all subsequent parallel task.
	  </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><envar>PSI_HOSTFILE</envar></term>
        <listitem>
          <para>
            contains a filename listing all desired nodes by
            name, one per line.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      A particular node can be listed several times. Depending on
      further environment variables, especially
      <envar>PSI_NODES_SORT</envar>, this node will be used more than
      once. This behavior is important for nodes housing more than
      one CPU.
    </para>
    <para>
      The environment variables will be evaluated in the listed
      order. The first defined variable will be used, all following
      ones will be ignored. E.g., if <envar>PSI_NODES</envar> is set,
      <envar>PSI_HOSTS</envar> and <envar>PSI_HOSTNAME</envar> will
      not be recognized.
    </para>
    <para>
      If none of these variables is set, all nodes within the cluster
      will be taken into account for the temporary node list.
    </para>
  </section>

  <section>
    <title>Node availability</title>

    <para>
      In a next step,
      the previously defined temporary node list will be further
      checked for various constraints prohibiting the startup of 
      processes on this nodes. In particular, the following
      verifications are made:
    </para>
    <itemizedlist>
      <listitem>
	<para>
          Is the node currently available? Which means, is there currently
          a connection to the &ps; daemon on this node?
	</para>
	<para>
          If a node is shut down or crashed, the connections to the psid on
          this node will time out, and this node will be declared as
          "dead".
	</para>
      </listitem>
      <listitem>
	<para>
          Is the node supposed to run processes?
	</para>
	<para>
          Nodes can be excluded from running compute processes by
          setting the <option>runJobs</option> attribute for a node
          within the configuration file
          <filename>/etc/parastation.conf</filename>.
	</para>
      </listitem>
      <listitem>
	<para>
          Is the node preallocated for other users or group of users?
	</para>
	<para>
          Nodes can be preallocated for a user or a group of users by
          using the <command>set user</command> or <command>set
          group</command> within <command>psiadmin</command>.
	</para>
      </listitem>
      <listitem>
	<para>
          Is the node currently used exclusively by another task?
	</para>
	<para>
          See below.
	</para>
      </listitem>
      <listitem>
	<para>
          Is the number of "regular" processes currently running on
          this node less than the maximum number of processes allowed
          on this node? See <command>set maxproc</command> of
          <command>psiadmin</command>.
          <!-- TODO: fg: what is a regular process? -->
          <!-- TODO: fg: compatibility with older PS versions -->
	</para>
      </listitem>
      <listitem>
	<para>
          Is the number of "regular" processes currently running on
          this node less than the number of CPUs available on this
          node?
          <!-- TODO: fg: remark hyperthreading -->
	</para>
      </listitem>
      <listitem>
	<para>
          Is the communication hardware and the underlying protocol
          available?
	</para>
      </listitem>
    </itemizedlist>

    <para>
      As already mentioned, there are more environment variables
      influencing the selection for the temporary node list:
    </para>
    <itemizedlist>
      <listitem>
	<para>
          <envar>PSI_EXCLUSIVE</envar>
	</para>
	<para>
          Only those nodes will be selected, where currently no other
          process is running. In addition, this nodes will be blocked
          for further tasks, until the current task terminates.
	</para>
      </listitem>
      <listitem>
	<para>
          PSI_OVERBOOK
	</para>
	<para>
          Normally, only as much processes can be run on a node as many
          CPUs are available. If this environment variable is set,
          this limitation is no longer considered and any number of
          processes can be run on this node.
	</para>
        <para>
          Currently, defining this variable will also enforce
          <envar>PSI_EXCLUSIVE</envar>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      For both variables, it is sufficient to be defined. The actual
      value will not be recognized.
    </para>
  </section>

  <section>
    <title>Sorting nodes</title>
    <para>
      The temporary node list will be sorted accordingly to the value
      of the environment variable <envar>PSI_NODES_SORT</envar>:
    </para>
    <itemizedlist>
      <listitem>
	<para>
          <envar>PROC</envar>
	</para>
	<para>
          Sorting is done according to the number of
          currently running processes on each node.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>LOAD</envar> or <envar>LOAD1</envar>
	</para>
	<para>
          The node list will be sorted according to system load of the
          last 1 minute.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>LOAD_5</envar>
	</para>
	<para>
          The node list will be sorted according to system load of the
          last 5 minutes.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>LOAD_15</envar>
	</para>
	<para>
          The node list will be sorted according to system load of the
          last 15 minutes.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>PROC+LOAD</envar>
	</para>
	<para>
          The node list will be sorted according to the number of
          currently running processes per node (PROC) and the load
          average for the last minute (LOAD) of these particular node.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>NONE</envar>
	</para>
	<para>
          No sorting at all is done.
	</para>
      </listitem>
    </itemizedlist>
    <para>
      If <envar>PSI_NODES_SORT</envar> is not defined, sorting will be
      done according to the number of processes per node (PROC). If
      the variable is defined, but the value is not known, an error will
      be reported. The value of this variable is not case sensitive.
    </para>
    <para>
      Beside the listed sorting criteria(s), there are additional ones
      applied afterwards:
    </para>
    <itemizedlist>
      <listitem>
	<para>
          Different number of CPUs
	</para>
	<para>
          If there are nodes with different number of CPUs, nodes
          with higher CPU count will be sorted before nodes with less
          CPU count.
	</para>
      </listitem>
      <listitem>
	<para>
          Identical number of CPUs
	</para>
	<para>
          Nodes with equal CPU count will be sorted according to there
          &ps; ID.
	</para>
      </listitem>
    </itemizedlist>
    <para>
      These criteria will enforce an explicit order of the temporary
      node list for all possible states of the particular nodes.
    </para>
  </section>

  <section>
    <title>Process placement</title>
    <para>
      The real distribution of the processes on the nodes defined by
      the temporary node list is controlled by two more environment
      variables: <envar>PSI_OVERBOOK</envar> and
      <envar>PSI_LOOP_NODES_FIRST</envar>. Depending whether this
      variables are defined, the processes of a parallel task will be
      spread on the temporary node list.
    </para>
    <itemizedlist>
      <listitem>
	<para>
          none defined:
	</para>
	<para>
          Beginning with the first node of the temporary node list,
          processes will be placed on the node as long as the current
          process count is less than the number of CPUs. This will
          happen as long as all processes are placed or the list is
          exhausted. If all nodes in the list are done and there are
          still processes to place, the startup of the parallel task
          will be canceled.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>PSI_LOOP_NODES_FIRST</envar> is defined:
	</para>
	<para>
          Beginning with the first node of the temporary node list,
          one process will be placed on each node of the list, if
          the number of processes on this node is less than the number
          of CPUs. The end of the list will wrap to the beginning.
          Searching the list will be done as long as there are still
          processes left. If there are no more nodes
          available where the number of processes is less than the
          number of CPUs, the startup of the parallel task will be
          canceled.
	</para>
      </listitem>
      <listitem>
	<para>
          <envar>PSI_OVERBOOK</envar> is defined:
	</para>
	<para>
          If there are at least as many "unused" CPUs on all the nodes
          of the temporary node list as processes to start, the
          behavior is identical to the action if this variable is not
          defined.
	</para>
        <para>
          If there are more processes requested than unused CPUs
          available, the algorithm evenly distributes the processes
          on all CPUs.  The actual placement is done
          in the order of the temporary node list. Each node will be
          filled up with the calculated number of processes. Limits
          defined by the administrator, e.g. <command>set
          maxproc</command> will be enforced. If not all processes can
          be placed on a node, the startup of the parallel task will
          be canceled.
        </para>
      </listitem>
      <listitem>
	<para>
          <envar>PSI_LOOP_NODES_FIRST</envar> and
          <envar>PSI_OVERBOOK</envar> are defined:
	</para>
	<para>
          If there are enough "unused" CPUs available, the behavior
          for this combination is identical to the behavior
          describe previously for "<envar>PSI_LOOP_NODES_FIRST</envar>
          is defined". Otherwise the placement is done in a manner
          that the processes are evenly distributed on all nodes in
          the temporary node list. For this purpose the node list is
          cyclic traversed and each time a process is placed on the
          node. All defined limits will be obeyed. If it's not
          possible to place all processes, the startup of the parallel
          task will be canceled.
	</para>
      </listitem>
    </itemizedlist>
    <para>
      The environment variable <envar>PSI_WAIT</envar> controls the
      behavior, if the startup of the task was previously canceled
      due to node constrains. If not defined, an error will be
      reported and the process terminates.
    </para>
    <para>
      If this variable is defined, the startup request will be queued.
      Each time the resource allocation within the cluster changes,
      e.g. if a task terminates or a new node is detected, the startup
      requests queued up to now will be reevaluated as long as the next
      request cannot be fulfilled. Requests are queued and dequeued in
      a "first come first server" order. It is not possible for a
      request to bypass other requests, algorithms like "backfilling"
      are not implemented.
    </para>
  </section>
</chapter>
