*
* ParaStation
*
* Copyright (C) 2006-2017 ParTec Cluster Competence Center GmbH, Munich
* Copyright (C) 2024-2025 ParTec AG, Munich
*
* This file may be distributed under the terms of the Q Public License
* as defined in the file LICENSE.QPL included in the packaging of this
* file.
*
* ParaStation's types of messages and their maximum size.
*

Structure of IP message:
struct iphdr {
    __u8    ihl:4,		1/2
	    version:4;		1/2
    __u8    tos;		1
    __be16  tot_len;		2
    __be16  id;			2
    __be16  frag_off;		2
    __u8    ttl;		1
    __u8    protocol;		1
    __sum16 check;		2
    __be32  saddr;		4
    __be32  daddr;		4
};
+payload

Overhead: 20 Byte


Structure of UDP message:
struct udphdr {
    __be16  source;		2
    __be16  dest;		2
    __be16  len;		2
    __sum16 check;		2
};
+payload

Overhead: 8 Byte

Overhead (TCP): 20 Byte

Structure of RDP message:
typedef struct {
    int16_t type;         /**< packet type */			2
    uint16_t len;         /**< message length *not* including header */	2
    int32_t seqno;        /**< Sequence number of packet */	4
    int32_t ackno;        /**< Sequence number of ack */	4
    int32_t connid;       /**< Connection Identifier */		4
} rdphdr_t;
+ payload

Overhead: 16 Byte


Structure of DDMsg*_t:
typedef struct {
    int16_t type;          /**< msg type */				2
    int16_t len;           /**< total length of the message */		2
    PStask_ID_t sender;    /**< sender of the message */		8
    PStask_ID_t dest;      /**< final destination of the message */	8
} DDMsg_t;
+ payload

Overhead: 20 Byte


   Message ID			Type			Size (- header length)

PSP_DD_DAEMONCONNECT		DDBufferMsg_t		16
PSP_DD_DAEMONESTABLISHED	DDBufferMsg_t		16
PSP_DD_DAEMONSHUTDOWN		DDMsg_t			0

PSP_DD_SENDSTOP			DDTypedMsg_t		4 (type signals ACK req.)
PSP_DD_SENDCONT			DDMsg_t			0
PSP_DD_SENDSTOPACK		DDMsg_t			0

PSP_DD_CHILDDEAD		DDErrorMsg_t		12
PSP_DD_CHILDBORN		DDErrorMsg_t		12
PSP_DD_CHILDACK			DDErrorMsg_t		12
PSP_DD_CHILDRESREL		DDBufferMsg_t		filled by PSP_putMsgBuf()

PSP_DD_NEWANCESTOR		DDErrorMsg_t		12
PSP_DD_ADOPTCHILDSET		DDBufferMsg_t		filled by PSP_putMsgBuf()
							maybe multiple messages
PSP_DD_ADOPTFAILED		DDBufferMsg_t		dropped PSP_DD_ADOPTCHILDSET
PSP_DD_INHERITDONE		DDBufferMSg_t		12 (8+4)
PSP_DD_INHERITFAILED		DDMsg_t			0

PSP_DD_CREATEPART		DDTypedBufferMsg_t	fragmentation layer
PSP_DD_PROVIDEPART		DDTypedBufferMsg_t	fragmentation layer
PSP_DD_REGISTERPART		DDTypedBufferMsg_t	fragmentation layer
PSP_DD_CANCELPART		DDMsg_t			0
PSP_DD_GETTASKS			DDMsg_t			0
PSP_DD_PROVIDETASK		DDTypedBufferMsg_t	fragmentation layer
PSP_DD_TASKDEAD			DDMsg_t			0
PSP_DD_TASKSUSPEND		DDMsg_t			0
PSP_DD_TASKRESUME		DDMsg_t			0

PSP_DD_LOAD			DDBufferMsg_t		48 (2*2 + 3*8 + 2*8 + 4)
PSP_DD_ACTIVE_NODES		DDBufferMsg_t		filled by PSP_putMsgBuf()
							maybe multiple messages
PSP_DD_DEAD_NODE		DDBufferMsg_t		4
PSP_DD_MASTER_IS		DDBufferMsg_t		4

PSP_DD_GETRESERVATION		DDBufferMsg_t		20 (see PSP_CD_GETRESERVATION)
PSP_DD_RESERVATIONRES		DDBufferMsg_t		12 or 8 (4 + 4 + 4 / 4 + 4)
PSP_DD_GETSLOTS			DDBufferMsg_t		6 (see PSP_CD_GETSLOTS)
PSP_DD_SLOTSRES			DDBufferMsg_t		6 or 8 (4 + 2 or 4 + 4)

PSP_DD_RESCREATED		DDTypedBufferMsg_t	fragmentation layer
PSP_DD_RESRELEASED		DDBufferMsg_t		20 (4 + 8 + 8)
PSP_DD_RESSLOTS			DDTypedBufferMsg_t	fragmentation layer
PSP_DD_RESCLEANUP		DDMsg_t			0
PSP_DD_RESFINALIZED		DDTypedBufferMsg_t	fragmentation layer
PSP_DD_JOBCOMPLETE		DDTypedBufferMsg_t	fragmentation layer


   Message ID			Type			Size (- header length)

PSP_CD_CLIENTCONNECT		DDInitMsg_t		4 + 4 (+ 12 without PEERCRED)
PSP_CD_CLIENTESTABLISHED	DDTypedBufferMsg_t	9 + x (1+4+4+2 + string)
PSP_CD_CLIENTREFUSED		DDTypedBufferMsg_t	4 (+ 4 depending on error)

PSP_CD_SETOPTION		DDOptionMsg_t		129 (1 + 16*(4+4))
PSP_CD_GETOPTION		DDOptionMsg_t		129 (1 + 16*(4+4))

??? below
PSP_CD_INFOREQUEST		DDTypedBufferMsg_t	4 + max(4, max. length HW name)
PSP_CD_INFORESPONSE		DDTypedBufferMsg_t	4 + 8 + 32 (from PSpart_encodeReq)
							4 + NODES_CHUNK*4 (= 1028)
							4 + (status strings)
							4 + (length HW name)
							4 + 1024 (list chunks)

PSP_CD_SPAWNREQUEST		DDTypedBufferMsg_t	fragmentation layer
PSP_CD_SPAWNSUCCESS		DDErrorMsg_t		12
PSP_CD_SPAWNFAILED		DDErrorMsg_t		12
PSP_CD_SPAWNFINISH		DDErrorMsg_t		12

PSP_CD_ACCOUNT			@todo			@todo

PSP_CD_NOTIFYDEAD		DDSignalMsg_t		10
PSP_CD_NOTIFYDEADRES		DDSignalMsg_t		10
PSP_CD_RELEASE			DDSignalMsg_t		10
PSP_CD_RELEASERES		DDSignalMsg_t		10
PSP_CD_SIGNAL			DDSignalMsg_t		10
PSP_CD_WHODIED			DDSignalMsg_t		10
PSP_CD_SIGRES			DDErrorMsg_t		8

PSP_CD_DAEMONSTART		DDBufferMsg_t		2
PSP_CD_DAEMONSTOP		DDMsg_t			0
PSP_CD_DAEMONRESET		DDBufferMsg_t		4
PSP_CD_HWSTART			DDBufferMsg_t		4
PSP_CD_HWSTOP			DDBufferMsg_t		4
PSP_CD_PLUGIN			DDTypedBufferMsg_t	4 + (pluginname string)
PSP_CD_PLUGINRES		DDTypedMsg_t		4

PSP_CD_REQUESTPART		DDTypeBufferMsg_t	fragmentation layer
PSP_CD_PARTITIONRES		DDTypedMsg_t		4
PSP_CD_GETRESERVATION		DDBufferMsg_t		20 (4 + 4 + 2 + 4 + 4 + 2)
PSP_CD_RESERVATIONRES		DDBufferMsg_t		8 (4 + 4)
PSP_CD_GETSLOTS			DDBufferMsg_t		6 (4 + 2)
PSP_CD_SLOTSRES			DDBufferMsg_t		1028 (4 + NODES_CHUNK*4)
PSP_CD_FINRESERVATION		DDTypeBufferMsg_t	fragmentation layer
PSP_CD_GETNODES			?? DDBufferMsg_t		14 (4 + 4 + 4 + 2)
PSP_CD_NODESRES			?? DDBufferMsg_t		4 + NODES_CHUNK*

PSP_CD_SENDSTOP			DDMsg_t			0
PSP_CD_SENDCONT			DDMsg_t			0

PSP_CC_MSG			PSLog_Msg_T		1060 (maximum)
PSP_CC_ERROR			DDBufferMsg_t		PSLog_headerSize (maybe)

PSP_CD_ERROR			DDErrorMsg_t		8
