#                                                       -*- rpm-spec -*-
# ParaStation
#
# Copyright (C) 2005-2021 ParTec Cluster Competence Center GmbH, Munich
# Copyright (C) 2021-2023 ParTec AG, Munich
#
# This file may be distributed under the terms of the Q Public License
# as defined in the file LICENSE.QPL included in the packaging of this
# file.
#
%{?_without_psconfig: %global disable_psconfig 1}
%{?_without_systemd: %global disable_systemd 1}
%{?_without_munge: %global disable_munge 1}
%{?_without_pam: %global disable_pam 1}
%{?_without_spank: %global disable_spank 1}
%{?_without_testplugins: %global disable_testplugins 1}

%if ( 0%{?rhel} && 0%{?rhel} < 7 ) || %(pkg-config --exists systemd; echo $?) != 0
%global disable_systemd 1
%endif

%if !0%{?disable_systemd}
%{!?_unitdir: %global _unitdir %(pkg-config --variable=systemdsystemunitdir systemd)}
%{!?_systemdconfdir: %global _systemdconfdir %(pkg-config --variable=systemdsystemconfdir systemd)}
%endif

Summary:   ParaStation Process Management
Vendor:    ParTec AG, Munich, Germany
Name:      psmgmt%{?disable_psconfig:-parastationconf}
Version:   @VERSION_psmgmt@
Release:   @RELEASE_psmgmt@
License:   QPL
Group:     Productivity/Clustering/Computing
Packager:  support@par-tec.de
Source0:   psmgmt-%{version}-%{release}.tar.gz
%if !0%{?disable_psconfig}
Requires:  psconfig >= 5.2.0-0, glib2 >= 2.22.5
BuildRequires:	psconfig-dev, glib2-devel
%endif
BuildRequires:	popt-devel
%if !0%{?disable_pam}
BuildRequires:	pam-devel
%endif
%if !0%{?disable_spank}
BuildRequires:	slurm-devel
%endif
%if 0%{?suse_version}
BuildRequires:	libnuma-devel
%else
BuildRequires:	numactl-devel
%endif
BuildRequires:	hwloc-devel
BuildRequires:  pmix-devel
%if !0%{?disable_systemd}
BuildRequires:  systemd
Requires(post): systemd
Requires(preun): systemd
Requires(postun): systemd
%endif
%if !0%{?disable_munge}
BuildRequires: munge-devel
%endif


BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)

# for now
%global _prefix /opt/parastation
%global _exec_prefix %{_prefix}
%global _bindir %{_exec_prefix}/bin
%global _sbindir %{_exec_prefix}/sbin
%global _datarootdir %{_prefix}/share
%global _datadir %{_datarootdir}
%global _includedir %{_prefix}/include
%global _libdir %{_prefix}/%{_lib}
%global _libexecdir %{_exec_prefix}/libexec
%global _plugindir %{_prefix}/plugins
%global _configdir %{_prefix}/config
%global _scriptsdir %{_prefix}/scripts
%global _docdir %{_datadir}/doc
%global _spooldir %{_localstatedir}/spool/parastation
%global _pamdir /%{_lib}/security

%description
The ParaStation Process Management Layer.

%package devel
Summary:   Development files for ParaStation process management
Group:     Productivity/Clustering/Computing
Requires:  %{name} = %{version}-%{release}

%description devel
The psmgmt-devel package includes additional header files necessary
for developing plugins of the ParaStation Process Management daemon.

%package mpilegacy
Summary:   Legacy MPI-starters for ParaStation process management
Group:     Productivity/Clustering/Computing
Requires:  %{name} = %{version}-%{release}

%description mpilegacy
The psmgmt-mpilegacy package includes additional MPI starters for
legacy implementations of the MPI version 1 standard.

%package psmom
Summary:   The MOM plugin of the ParaStation process management
Group:     Productivity/Clustering/Computing
Requires:  %{name} = %{version}-%{release}
Obsoletes: psmom <= 5.2.10-20

%description psmom
The ParaStation MOM is a complete replacement of the pbs_mom. No other
daemon is necessary to integrate compute nodes into a Torque batch system.

%package psslurm
Summary:   The Slurm plugin of the ParaStation process management
Group:     Productivity/Clustering/Computing
Requires:  %{name} = %{version}-%{release}
Requires:  %{name}-slurmutils = %{version}-%{release}

%description psslurm
The ParaStation Slurm plugin is a complete replacement of the slurmd on
compute nodes. No other daemon is necessary to integrate compute nodes into
a Slurm batch system.

%package pspmix
Summary:   The PMIx plugin of the ParaStation process management
Group:     Productivity/Clustering/Computing
Requires:  %{name} = %{version}-%{release}
%global pmix_version_min %(rpm -q pmix --qf "%{RPMTAG_VERSION}")
%global pmix_version_top %(rpm -q pmix --qf "%{RPMTAG_VERSION}" | awk -v FS="." '{ print $1"."$2+1".0" }')
Requires: pmix >= %{pmix_version_min}, pmix < %{pmix_version_top}


%description pspmix
The ParaStation PMIx plugin provides support for PMIx based on the libpmix.
It works standalone or together with psslurm.

%package slurmutils
Summary:   Utilities improving Slurm support (spank, psslurmgetbind, etc.)
Group:     Productivity/Clustering/Computing
Obsoletes: %{name}-spank <= 5.1.35-0

%description slurmutils
Utilities helping to improve Slurm support. This includes spank plugins
required to support e.g. the interplay of psgw functionality and
Slurm or the psslurmgetbind tool.

%package rrcomm-devel
Summary:   Development files for the rank routed communication protocol
Group:     Productivity/Clustering/Computing

%description rrcomm-devel
Rank routed communication is intended to provided communication
capabilities to client processes belonging to the same
applications. It releases the processes from the burden to register
and distribute addressing information beforehand. This package
provides a client library hiding all unnecessary technical details
from the programmer.

%if !0%{?disable_testplugins}
%package testplugins
Summary:   Set of plugins for debug and testing (psBlackHole, etc.)
Group:     Productivity/Clustering/Computing
Requires:  %{name} = %{version}-%{release}

%description testplugins
Set of psid plugins for debug and testing psmgmt. This includes:
- psBlackHole to randomly drop ParaStation messages
- fakenode to mimick more potent hardware via pre-recorded hwloc info
- no_flowcontrol to disable flow control for testing purposes
- delaySlurmMsg to delay the arrival of Slurm messages in psslurm
- delayPSPMsg to delay the arrival of ParaStation protocol messages

%endif

%if 0%{?suse_version}
%debug_package
%endif

%prep
%setup -q -n psmgmt-%{version}-%{release}

%build
export CFLAGS="%(echo %{optflags}|sed -e 's,-O.,,')"
%configure --datarootdir=%{_datarootdir} --with-pamdir=%{_pamdir} \
	   %{?disable_psconfig:--disable-psconfig} \
	   %{?disable_systemd:--with-unitdir=no} \
	   %{?disable_spank:--disable-spank} \
	   %{?disable_testplugins:--disable-testplugins}
make %{?_smp_mflags}

%install
rm -rf %{buildroot}
make DESTDIR=%{buildroot} install
touch %{buildroot}/etc/parastation.conf
find %{buildroot} -type f -name '*.la' -delete

%clean
rm -rf %{buildroot}

%pre
if [ $1 -gt 1 ] ; then  # Thats an update
    if [ -x /opt/parastation/config/PSM_INSTALL ]; then
	# Upgrade from old version, call the OLD uninstall script.
	/opt/parastation/config/PSM_INSTALL -U
	if [ -f /opt/parastation/config/parastation.conf ]; then
	    cp -a /opt/parastation/config/parastation.conf /etc
	fi
    fi
fi
exit 0

%post
ln -sf %{_libexecdir}/jail/jail-main.sh %{_plugindir}/jail.sh
ln -sf %{_libexecdir}/jail/jail-main.sh %{_plugindir}/jail-term.sh
if [ $1 -eq 1 ] ; then
    # first install
%if !0%{?disable_systemd}
    systemctl preset psid.service psidstarter.socket >/dev/null 2>&1 || :
%else
    /sbin/chkconfig --add parastation
    /sbin/chkconfig psidstarter on
    /sbin/service xinetd try-restart
    echo "******************************************************"
    echo "* Please configure parastation using psconfig,       *"
    echo "* or prepare and maintain the configuration file      *"
    echo "* /etc/parastation.conf                              *"
    echo "******************************************************"
%endif
fi
exit 0

%preun
if [ $1 -eq 0 ] ; then
    # final de-install
%if !0%{?disable_systemd}
    systemctl --no-reload disable psid.service psidstarter.socket > /dev/null 2>&1 || :
    systemctl stop psid.service psidstarter.socket > /dev/null 2>&1 || :
%else
    /sbin/service parastation stop
    /sbin/chkconfig psidstarter off
    /sbin/chkconfig --del parastation
    /sbin/service xinetd reload
%endif
fi
exit 0

%postun
if [ $1 -eq 0]; then
    # de-install
    [ -L %{_plugindir}/jail.sh ] && rm -f %{_plugindir}/jail.sh
    [ -L %{_plugindir}/jail-term.sh ] && rm -f %{_plugindir}/jail-term.sh
fi
%if !0%{?disable_systemd}
    systemctl daemon-reload >/dev/null 2>&1 || :
%endif

%files
%defattr(-,root,root)
%doc ChangeLog
%doc LICENSE.QPL
%doc NEWS
%doc VERSION.psmgmt
%doc doc/parastation.conf.tmpl
%doc doc/psconfig
%doc doc/systemd
%doc doc/README.cgroup
%doc doc/README.nodeinfo
%doc doc/README.pspam
%doc plugins/rrcomm/doc/psconfig
%doc plugins/rrcomm/doc/README.rrcomm
%{_bindir}/mlisten
%{_bindir}/mpiexec
%{_bindir}/psaccounter
%{_bindir}/psaccview
%{_bindir}/psiadmin
%{_bindir}/psid
%{_bindir}/psilogger
%{_bindir}/pspelogue
%{_bindir}/test_config
%{_bindir}/test_pse
%{_libexecdir}/psmgmt
%{_configdir}
%{_scriptsdir}
%{_libdir}/libpse.so*
%{_libdir}/libpsi.so*
%dir %{_plugindir}
%{_plugindir}/cgroup.so
%config(noreplace) %{_plugindir}/cgroup.conf
%{_plugindir}/jail.so
%config(noreplace) %{_plugindir}/jail.conf
%{_libexecdir}/jail
%config(noreplace) %{_libexecdir}/jail/jail-config.inc
%config(noreplace) %{_libexecdir}/jail/jail-cpuacct.inc
%config(noreplace) %{_libexecdir}/jail/jail-cpuset.inc
%config(noreplace) %{_libexecdir}/jail/jail-devices.inc
%config(noreplace) %{_libexecdir}/jail/jail-functions.inc
%config(noreplace) %{_libexecdir}/jail/jail-main.sh
%config(noreplace) %{_libexecdir}/jail/jail-memory.inc
%config(noreplace) %{_libexecdir}/jail/jail-oom.inc
%config(noreplace) %{_libexecdir}/jail/jail-term-cpuacct.inc
%config(noreplace) %{_libexecdir}/jail/jail-term-cpuset.inc
%config(noreplace) %{_libexecdir}/jail/jail-term-devices.inc
%config(noreplace) %{_libexecdir}/jail/jail-term-memory.inc
%{_plugindir}/nodeinfo.so
%{_plugindir}/pelogue.so
%{_plugindir}/psaccount.so
%config(noreplace) %{_plugindir}/psaccount.conf
%{_libexecdir}/psaccount
%{_plugindir}/psexec.so
%{_plugindir}/psgw.so
%config(noreplace) %{_plugindir}/psgw.conf
%doc doc/README.psgw
%doc plugins/psgw/doc/README.psgw_plugins
%doc plugins/psgw/doc/psgw_error.example
%if !0%{?disable_spank}
%{_libexecdir}/psgw
%endif
%{_plugindir}/pspam.so
%if !0%{?disable_pam}
%{_pamdir}/pam_pspam.so
%{_plugindir}/pam_service.so
%endif
%{_plugindir}/pspmi.so
%{_plugindir}/psresport.so
%config(noreplace) %{_plugindir}/psresport.conf
%{_plugindir}/rrcomm.so
%config(missingok,noreplace) %{_sysconfdir}/gdbinit.d/psmgmt.gdb
%config(missingok,noreplace) %{_sysconfdir}/profile.d/psmgmt.sh
%config(missingok,noreplace) %{_sysconfdir}/profile.d/psmgmt.csh
%if !0%{?disable_systemd}
%config(noreplace) %{_sysctldir}/99-psid.conf
%_unitdir/psid.service
%_unitdir/psidstarter@.service
%_unitdir/psidstarter.socket
%dir %{_systemdconfdir}/psid.service.d
%else
%{_sysconfdir}/init.d/parastation
%config(noreplace) /etc/xinetd.d/psidstarter
%endif
%ghost %config(missingok,noreplace) /etc/parastation.conf
%ghost %{_plugindir}/jail.sh
%ghost %{_plugindir}/jail-term.sh
%attr(770,root,root) %{_localstatedir}/log/psaccounter

%files devel
%defattr(-,root,root,-)
%{_includedir}/config_parsing.h
%{_includedir}/list.h
%{_includedir}/list_t.h
%{_includedir}/logging.h
%{_includedir}/plugin.h
%{_includedir}/pscommon.h
%{_includedir}/pscpu.h
%{_includedir}/psdaemonprotocol.h
%{_includedir}/pse.h
%{_includedir}/psenv.h
%{_includedir}/pshostlist.h
%{_includedir}/psi.h
%{_includedir}/psidcomm.h
%{_includedir}/psidhook.h
%{_includedir}/psidnodes.h
%{_includedir}/psidplugin.h
%{_includedir}/psidscripts.h
%{_includedir}/psidstatus.h
%{_includedir}/psidtask.h
%{_includedir}/psidutil.h
%{_includedir}/psienv.h
%{_includedir}/psiinfo.h
%{_includedir}/psispawn.h
%{_includedir}/psnodes.h
%{_includedir}/pspartition.h
%{_includedir}/psprotocol.h
%{_includedir}/psreservation.h
%{_includedir}/pssignal.h
%{_includedir}/pstask.h
%{_includedir}/pstaskid.h
%{_includedir}/selector.h
%{_includedir}/timer.h

%files mpilegacy
%defattr(-,root,root,-)
%{_bindir}/gmspawner
%{_bindir}/mpirun_chgm
%{_bindir}/mpirun_chp4
%{_bindir}/mpirun_openib
%{_bindir}/psispawn
%{_bindir}/psmstart
%{_bindir}/pssh

%files psmom
%defattr(-,root,root,-)
%doc plugins/psmom/doc/psmom-prologue-example
%doc plugins/psmom/doc/psmom-epilogue-example
%doc plugins/psmom/doc/psmom-timeout-example
%doc plugins/psmom/ChangeLog-History
%doc plugins/psmom/LICENSE.OpenPBS
%doc plugins/psmom/README
%if !0%{?disable_pam}
%{_pamdir}/pam_psmom.so
%endif
%config(noreplace) /etc/pam.d/psmom
%{_plugindir}/psmom.so
%config(noreplace) %{_plugindir}/psmom.conf
%dir %{_spooldir}
%dir %{_spooldir}/jobs
%dir %{_spooldir}/nodefiles
%attr(1777,root,root) %{_spooldir}/temp
%attr(1777,root,root) %{_spooldir}/undelivered
%attr(750,root,root) %{_spooldir}/account
%attr(750,root,root) %{_spooldir}/backup
%attr(751,root,root) %{_spooldir}/scripts

%files psslurm
%defattr(-,root,root,-)
%doc plugins/psslurm/doc/psslurm-epilogue.example
%doc plugins/psslurm/doc/psslurm-epilogue.finalize.example
%doc plugins/psslurm/doc/psslurm-prologue.example
%config(noreplace) %{_plugindir}/psslurm.conf
%{_plugindir}/psslurm.so
%dir %{_spooldir}
%dir %{_spooldir}/jobs
%dir %{_spooldir}/nodefiles
%attr(1777,root,root) %{_spooldir}/temp
%attr(1777,root,root) %{_spooldir}/undelivered
%attr(750,root,root) %{_spooldir}/account
%attr(750,root,root) %{_spooldir}/backup
%attr(751,root,root) %{_spooldir}/scripts
%if !0%{?disable_spank}
%dir %{_libdir}/slurm
%{_libdir}/slurm/spank_api.so
%endif
%if !0%{?disable_munge}
%{_plugindir}/psmunge.so
%if !0%{?disable_systemd}
%config(missingok,noreplace) %{_systemdconfdir}/psid.service.d/munge.conf
%endif
%endif

%files pspmix
%defattr(-,root,root,-)
%{_plugindir}/pspmix.so
%config(noreplace) %{_plugindir}/pspmix.conf

%files slurmutils
%doc plugins/psslurm/doc/resume_nodes.sh.example
%doc plugins/psslurm/doc/suspend_nodes.sh.example
%doc plugins/psslurm/doc/slurmctld.prologue.example
%{_bindir}/psslurmgetbind
%if !0%{?disable_spank}
%dir %{_libdir}/slurm
%{_libdir}/slurm/psgw_spank.so
%{_libdir}/slurm/cudaspank.so
%{_libdir}/slurm/globresspank.so
%{_libdir}/slurm/nopshcspank.so
%{_libdir}/slurm/noturbospank.so
%{_libdir}/slurm/perfparanoidspank.so
%{_libdir}/slurm/perftoolspank.so
%{_libdir}/slurm/showglobresspank.so
%{_libdir}/slurm/visspank.so
%{_libdir}/slurm/x11spank.so
%endif

%files rrcomm-devel
%{_includedir}/rrcomm.h
%{_libdir}/librrcomm.a

%if !0%{?disable_testplugins}
%files testplugins
%defattr(-,root,root,-)
%{_plugindir}/delayPSPMsg.so
%{_plugindir}/delaySlurmMsg.so
%{_plugindir}/delegateStat.so
%{_plugindir}/fakenode.so
%{_plugindir}/no_flowcontrol.so
%{_plugindir}/psBlackHole.so
%endif
