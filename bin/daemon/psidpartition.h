/*
 *               ParaStation
 *
 * Copyright (C) 2003-2004 ParTec AG, Karlsruhe
 * Copyright (C) 2005-2010 ParTec Cluster Competence Center GmbH, Munich
 *
 * $Id$
 *
 */
/**
 * @file
 * Helper functions in order to setup and handle partitions.
 *
 * $Id$
 *
 * @author
 * Norbert Eicker <eicker@par-tec.com>
 *
 */
#ifndef __PSIDPARTITION_H
#define __PSIDPARTITION_H

#ifdef __cplusplus
extern "C" {
#if 0
} /* <- just for emacs indentation */
#endif
#endif

/**
 * @brief Initialize partition stuff
 *
 * Initialize the partition handling framework. This registers
 * the necessary message handlers.
 *
 * @return No return value.
 */
void initPartition(void);

/**
 * @brief Send a PSP_DD_GETTASKS message.
 *
 * Send a PSP_DD_GETTASKS message to the node with ParaStation ID @a
 * node. This message on the one hand requests a list of all running
 * tasks on the receiving node, on the other hand a list of all
 * pending partition request on the receiving node.
 *
 * Thus, this message will be answered by one or more
 * PSP_DD_PROVIDETASK messages and zero or more PSP_DD_GETPART
 * messages.
 *
 * Usually this message is generated by a new master node in order to
 * get an overview on the cluster status.
 *
 * @param node The the node requested to send a list of active tasks
 * and pending partition requests.
 *
 * @return On success, the number of bytes sent within the
 * PSP_DD_GETTASKS message is returned. If an error occured, -1 is
 * returned and errno is set appropriately.
 */
int send_GETTASKS(PSnodes_ID_t node);

/**
 * @brief Send a PSP_DD_TASKDEAD message.
 *
 * Send a PSP_DD_TASKDEAD message to the current master node.  This
 * message informs the master node on the exit of the root process
 * with task ID @a tid and thus allows to free the corresponding
 * partition.
 *
 * @param tid The task ID of the root process that exited.
 *
 * @return On success, the number of bytes sent within the
 * PSP_DD_TASKDEAD message is returned. If an error occured, -1 is
 * returned and errno is set appropriately.
 */
int send_TASKDEAD(PStask_ID_t tid);

/**
 * @brief Send a PSP_DD_TASKSUSPEND message.
 *
 * Send a PSP_DD_TASKSUSPEND message to the current master node. This
 * message informs the master node on the suspension of the root
 * process with task ID @a tid and thus probably allows to temporarily
 * free the corresponding partition.
 *
 * @param tid The task ID of the root process that was suspended.
 *
 * @return On success, the number of bytes sent within the
 * PSP_DD_TASKSUSPEND message is returned. If an error occured, -1 is
 * returned and errno is set appropriately.
 */
int send_TASKSUSPEND(PStask_ID_t tid);

/**
 * @brief Send a PSP_DD_TASKRESUME message.
 *
 * Send a PSP_DD_TASKRESUME message to the current master node. This
 * message informs the master node on the continuation of the root
 * process with task ID @a tid and thus probably to realloc the
 * corresponding temporarily freed partition.
 *
 * @param tid The task ID of the root process that continues to run.
 *
 * @return On success, the number of bytes sent within the
 * PSP_DD_TASKRESUME message is returned. If an error occured, -1 is
 * returned and errno is set appropriately.
 */
int send_TASKRESUME(PStask_ID_t tid);

/**
 * @brief Send a PSP_DD_CANCELPART message.
 *
 * Send a PSP_DD_CANCELPART message to the current master node.  This
 * message informs the master node on the exit of the root process
 * with task ID @a tid and thus allows to cancel the corresponding
 * partition request.
 *
 * @param tid The task ID of the root process that exited.
 *
 * @return On success, the number of bytes sent within the
 * PSP_DD_CANCELPART message is returned. If an error occured, -1 is
 * returned and errno is set appropriately.
 */
int send_CANCELPART(PStask_ID_t tid);

/**
 * @brief Initialized partition handler.
 *
 * Initialize the partition handler machinery. This includes allocating
 * memory used to store centralized information on the allocated
 * partitions and pending partition requests.
 *
 * Usually this function is called upon detection that the local
 * daemon has to act as a master within the cluster.
 *
 * @return No return value.
 */
void initPartHandler(void);

/**
 * @brief Remove requests.
 *
 * Remove all requests originating from node @a node from the queue of
 * pending processes and from the queue of running processes.
 *
 * Within this function, the partition requests are actually not
 * removed from the queue, but only marked to get deleted within the
 * next rund of handlePartRequests(). This is necessary to make this
 * function robust enough the get used from within a RDP callback.
 *
 * @param node The node whose request are going to be cleaned up.
 *
 * @return No return value.
 */
void cleanupRequests(PSnodes_ID_t node);

/**
 * @brief Shutdown partition handler.
 *
 * Shut down the partition handler machinery. This includes
 * freeing memory used to store centralized information on the
 * allocated partitions and pending partition requests as allocated
 * within @ref initPartHandler().
 *
 * Usually this function is called upon detection that the local
 * daemon is freed from the burden of acting as the master within the
 * cluster.
 *
 * @return No return value.
 */
void exitPartHandler(void);

/**
 * @brief Number of assigned jobs.
 *
 * Return the number of job slots assigned to node @a node.
 *
 * @param node The node to request.
 *
 * @return On success, the number of jobs slots assigned to the
 * requested node is returned, or 0, if an error occurred. Be aware of
 * the fact, that an error cannot be distinguished from an empty node.
 */
unsigned short getAssignedJobs(PSnodes_ID_t node);

/**
 * @brief The nodes exclusive flag.
 *
 * Return the flag marking node @a node to be used by its current job
 * exclusively.
 *
 * @param node The node to request.
 *
 * @return On success, the nodes exclusive flag is returned, i.e. the
 * flag marking the node to be used by its current job exclusively. Or
 * 0, if an error occurred. Be aware of the fact, that an error cannot
 * be distinguished from a node not used exclusively.
 */
int getIsExclusive(PSnodes_ID_t node);


/**
 * @brief Send list of requests.
 *
 * Send a list of partition-requests registered within the master
 * daemon. Dependings on the flags set within @a opt, only pending,
 * running or suspended requests might be send to the @a requester.
 *
 * If @a ref PART_LIST_NODES is set in @a opt, also a list of the
 * processor slots allocated to the request is sent.
 *
 * @param requester Task ID of process waiting for answer.
 *
 * @param opt Option flags marking which type of requests to send and
 * format of answer (with/without list of slots).
 *
 * @return No return value.
 */
void sendRequestLists(PStask_ID_t requester, PSpart_list_t opt);

#ifdef __cplusplus
}/* extern "C" */
#endif

#endif  /* __PSIDPARTITION_H */
