/*
 * ParaStation
 *
 * Copyright (C) 2003-2004 ParTec AG, Karlsruhe
 * Copyright (C) 2005-2021 ParTec Cluster Competence Center GmbH, Munich
 * Copyright (C) 2021-2023 ParTec AG, Munich
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined in the file LICENSE.QPL included in the packaging of this
 * file.
 */
/**
 * \file
 * Handling of all input/output forwarding between logger and client.
 */
#ifndef __PSIDFORWARDER_H
#define __PSIDFORWARDER_H

#include <stdbool.h>
#include <sys/types.h>

#include "pstask.h"
#include "pslog.h"

/**
 * @brief The forwarder process.
 *
 * The actual forwarder process handling all input from stdin and
 * output to stdout and stderr operations of the controlled client
 * process. Therefore the forwarder process is connected to the local
 * daemon via which all communication operations of this kind are
 * delivered. The file descriptor connecting the forwarder to the
 * local daemon is passed via the fd member of @a task.
 *
 * Additionally it's the forwarders tasks to control the client
 * process' live and to supply post mortem failure and usage
 * information to the parent process. For this, a controlling file
 * descriptor connected to the client process is passed within @a
 * clientFD. It might be used to receive feedback from the client
 * process like error numbers. At the same time it can signal the
 * client process to omit the actual execv() and to exit().
 *
 * If @a eno is different from 0, the forwarder expects that something
 * went wrong during creation of the child process. Thus, a
 * PSP_CD_SPAWNFAILED message will be sent to the parent process. For
 * that, everything accessible via the tasks stderr_fd will be
 * appended to the corresponding message.
 *
 * @param task Task structure describing the client process to control
 *
 * @param clientFD File descriptor connected to the client process
 *
 * @param eno Error-number (i.e. errno) describing the problem
 * preventing the child-process from being spawned
 *
 * @return No return value.
 */
void PSID_forwarder(PStask_t *task, int clientFD, int eno);

/**
 * @brief Send a message to the local daemon
 *
 * Send the message @a msg to the local daemon.
 *
 * @param msg Message to be sent. The format of the message has to
 * follow DDMsg_t and further deduced message types.
 *
 * @return On success, the number of bytes send is returned,
 * i.e. usually @a msg->header.len. Otherwise -1 is returned and errno
 * is set appropriately.
 */
ssize_t sendDaemonMsg(void *msg);

/**
 * @brief Send string to logger.
 *
 * Send the NULL terminated string stored within @a buf as a message
 * of type @a type to the logger. This is done via the PSLog facility.
 *
 * @param type The type of the message to send.
 *
 * @param buf Buffer holding the character string to send.
 *
 * @return On success, the number of bytes written is returned,
 * i.e. usually this is strlen(@a buf). On error, -1 is returned, and
 * errno is set appropriately.
 *
 * @see PSLog_write()
 */
int PSIDfwd_printMsg(PSLog_msg_t type, char *buf);

/** Maximum length of a message generated by @ref PSIDfwd_printMsgf */
#define PSIDfwd_printMsgf_len 512

/**
 * @brief Send string produced according to a format string to logger.
 *
 * Send a formated string via sendMsg. The generated message will be
 * truncated after @ref PSIDfwd_printMsgf_len bytes.
 *
 * @param type The type of the message to send.
 *
 * @param format snprintf like format string.
 *
 * @return On success, the number of bytes written is returned,
 * i.e. usually this is strlen(@a buf). On error, -1 is returned, and
 * errno is set appropriately.
 *
 * @see PSLog_write()
 */
int PSIDfwd_printMsgf(PSLog_msg_t type, const char *format, ...)
	__attribute__ ((__format__ (__printf__, 2, 3)));

/**
 * @brief Detect execution within a psidforwarder process
 *
 * Allow hooks registered to PSIDHOOK_FRWRD_* or message handlers that
 * might be registered withing a psidforwarder process to reliably
 * detect the execution within a psidforwarder process.
 *
 * @return Return true if called within a psidforwarder process or
 * false otherwise
 */
bool PSIDfwd_inForwarder(void);

#endif /* __PSIDFORWARDER_H */
