#!/bin/sh 
#***********************************************************
#*                  ParaStation
#*
#*       Copyright (c) 2002 ParTec AG Karlsruhe
#*       All rights reserved.
#***********************************************************/
#**
#* PSM_INSTALL: ParaStation De-/Installationscript
#*
#* $Id: PSM_INSTALL,v 1.8 2002/07/11 16:52:19 hauke Exp $
#*
#* @author  
#*         Eduard Syrchyn <syrchyn@par-tec.de>
#*         Jens Hauke <hauke@par-tec.de>
#*


#Global variables
UNAME=`uname`
ETC_DIR="/etc"

_tmp=`dirname $0`
SELFPATH=`cd $_tmp;pwd`

PSCNFDIR=$SELFPATH
PSMAIN=`cd $PSCNFDIR/..;pwd`

#Linux only

#OSF only
PSKERNOSF="$PSMAIN/bin/modules/osf5.1"
PSDRV="psmx"
PSMMOD="$PSMDRV.mod"
PSMMTH="$PSMDRV.mth"

#/etc/inetd.conf
INETD_PSIDMASK="^[ 	]*psid[ 	]"
INETD_PSIDLINE="psid	stream	tcp	nowait	root	$PSMAIN/bin/psid psid -f $PSMAIN/config/parastation.conf"
INETD_PSLDMASK="^[ 	]*psld[ 	]"
INETD_PSLDLINE="psld	stream	tcp	nowait	root	$PSMAIN/bin/psld psld -f $PSMAIN/config/parastation.conf"
INETD_PID="/var/run/inetd.pid"
INETD_CNF="$ETC_DIR/inetd.conf"
INETD_BKP="$INETD_CNF.psm"

#/etc/xinetd.d
XINETD_DIR="$ETC_DIR/xinetd.d"
XINETD_PARA="\
#
# parastation
#
service psid
{
        disable = no
        socket_type     = stream
        wait            = no
        user            = root
        server          = $PSMAIN/bin/psid
        server_args     = -f $PSMAIN/config/parastation.conf
        log_on_failure  += USERID
}
service psld
{
        disable = no
        socket_type     = stream
        wait            = no
        user            = root
        server          = $PSMAIN/bin/psld
        server_args     = -f $PSMAIN/config/parastation.conf
        log_on_failure  += USERID
}
"
XINETD_PSM="$ETC_DIR/xinetd.d/parastation"

#/etc/services
SERV_PSRDPMASK="^[ 	]*psrdp[ 	]"
SERV_PSRDPLINE="psrdp            886/udp       # ParaStation Daemon RDP Port"
SERV_PSLDMASK="^[ 	]*psld[ 	]"
SERV_PSLDLINE="psld             887/tcp       # ParaStation License Daemon Start Port"
SERV_PSIDMASK="^[ 	]*psid[ 	]"
SERV_PSIDLINE="psid             888/tcp       # ParaStation Daemon Start Port"
SERV_PSIDSMASK="^[ 	]*psids[ 	]"
SERV_PSIDSLINE="psids            889/tcp       # ParaStation Daemon Connection Port"
SERV_PSMCASTMASK="^[ 	]*psmcast[ 	]"
SERV_PSMCASTLINE="psmcast         1889/udp       # ParaStation MCAST Port"
SERV_CNF="$ETC_DIR/services"
SERV_BKP="$SERV_CNF.psm"

self_post_inst_msg() {
    echo "#################################################################"
    echo "  Please, prepare and mantain the file                           "
    echo "  $PSCNFDIR/parastation.conf! (s.o. parastation.conf.template) "
    echo "#################################################################"
}

symlink() {
    ln -s -f $1 $2
    if [ $? -gt 0 ]
    then
	echo "WARNING:  cannot create the symbolic link $1 -> $2!"
    fi
}

backup() {
    src=$1
    bak=$2
    if [ ! -f $bak ]
    then
	cp $src $bak
	if [ $? -gt 0 ]
	then
	    echo "Create backupfile $bak faild. Abort!"
	    exit 1
	fi
    fi
}

# Remove backup, if backup equals orginal
unbackup() {
    src=$1
    bak=$2
    if [ -f $bak ]
    then
	diff $src $bak
	if [ $? -eq 0 ]
	then
	    rm $bak
	fi
    fi
}

patch_conf() {
    conf="$1"
    mask="$2"
    line="$3"

    oldline=`grep "$mask" $conf`
    if [ $? -eq 0 ]
    then
	if [ "$oldline"x != "$line"x ]
	then
	    echo "Line        $oldline"
	    echo "should be   $line"
	else
	    echo "Unchanged   $line"
	fi
	return 0
    fi
	    echo "Append      $line"
    echo "$line" >> $conf
}

unpatch_conf() {
    conf="$1"
    mask="$2"
    line="$3"

    oldline=`grep "$mask" $conf`
    if [ $? -eq 0 ]
    then
	if [ "$oldline"x != "$line"x ]
	then
	    echo "Unchanged   $oldline"
	else
	    echo "Remove      $line"
	    ed $conf >&/dev/null <<EOF
,g@^$line\$@d
w
q
EOF
	fi
	return 0
    fi
	    echo "Cant find   $line"
}

reload_inetd() {        
    if [ -f $INETD_PID ]    
    then
	echo "Reload inetd."
 	sss=`cat $INETD_PID`
	kill -s HUP $sss    
    else 
	echo "#######################################################"
	echo "# Reload or start the inetd (/usr/bin/inetd) daemon ! #"
	echo "#######################################################"
    fi
}

patch_services() {
    backup $SERV_CNF $SERV_BKP
    echo "Update $SERV_CNF."
    patch_conf "$SERV_CNF" "$SERV_PSRDPMASK" "$SERV_PSRDPLINE"
    patch_conf "$SERV_CNF" "$SERV_PSLDMASK" "$SERV_PSLDLINE"
    patch_conf "$SERV_CNF" "$SERV_PSIDMASK" "$SERV_PSIDLINE"
    patch_conf "$SERV_CNF" "$SERV_PSIDSMASK" "$SERV_PSIDSLINE"
    patch_conf "$SERV_CNF" "$SERV_PSMCASTMASK" "$SERV_PSMCASTLINE"
    echo "Update $SERV_CNF done."
}

patch_inetd() {
    backup $INETD_CNF $INETD_BKP
    echo "Update $INETD_CNF."
    patch_conf "$INETD_CNF" "$INETD_PSIDMASK" "$INETD_PSIDLINE"
    patch_conf "$INETD_CNF" "$INETD_PSLDMASK" "$INETD_PSLDLINE"
    echo "Update $INETD_CNF done."
    reload_inetd
}

patch_xinetd() {
    echo "Update $XINETD_DIR."
    echo "$XINETD_PARA" > $XINETD_PSM
    echo "Update $XINETD_DIR done."
}

cleanup_services() {
    unpatch_conf "$SERV_CNF" "$SERV_PSRDPMASK" "$SERV_PSRDPLINE"
    unpatch_conf "$SERV_CNF" "$SERV_PSLDMASK" "$SERV_PSLDLINE"
    unpatch_conf "$SERV_CNF" "$SERV_PSIDMASK" "$SERV_PSIDLINE"
    unpatch_conf "$SERV_CNF" "$SERV_PSIDSMASK" "$SERV_PSIDSLINE"
    unpatch_conf "$SERV_CNF" "$SERV_PSMCASTMASK" "$SERV_PSMCASTLINE"
    unbackup $SERV_CNF $SERV_BKP
}

cleanup_inetd() {
    unpatch_conf "$INETD_CNF" "$INETD_PSIDMASK" "$INETD_PSIDLINE"
    unpatch_conf "$INETD_CNF" "$INETD_PSLDMASK" "$INETD_PSLDLINE"
    unbackup $INETD_CNF $INETD_BKP
    reload_inetd
}

cleanup_xinetd() {
    if [ -f $XINETD_PSM ]
    then
	rm $XINETD_PSM
    fi
}

self_check_root() {
    WHO=`whoami`
    if [ $WHO = "root" ]
    then
	echo "User is <root>, OK!"	
    else
	echo "You should be <root>, but you are <$WHO>!"
    fi
}


inst_driver_osf() {
    if [ -d $PSKERNOSF ]
    then
        echo "Copying psmx.mod to /sys/BINARY and linking to /usr/sys/BINARY"
	rm -f /var/subsys/$PSMMOD
	rm -f /var/subsys/$PSMMTH
    
	/sbin/sysconfigdb -a -f $PSMMODCNFFUL $PSMDRV
	VSTATE=$?
	if [ $VSTATE -gt 0 ]
	then
	    echo "ERROR: cannot install the parameters of $PSMDRV kernel module,"
	    echo "check the path sysconfigtab ($PSMMODCNFFUL)!"
	fi
    
	symlink $PSMMODBIN /var/subsys/$PSMMOD
	symlink /subsys/device.mth /var/subsys/$PSMMTH
	/sbin/sync
    fi
}

uninst_driver_osf() {
    if [ -d $PSKERNOSF ]
    then
	echo "Unloading the driver if it is loaded"
	/sbin/sysconfig -u $PSMDRV >& /dev/null
	/sbin/sync
	echo "Removing a psmx module from sysconfigtab if it exists"
	/sbin/sysconfigdb -d $PSMDRV >& /dev/null
	/sbin/sync
    
	rm -f /var/subsys/$PSMMOD
	rm -f /var/subsys/$PSMMTH
    fi
}

do_install() {
    echo "Install ParaStation"
    do_info

    patch_services
    if [ -f $INETD_CNF ]
    then
	patch_inetd
    fi
    if [ -d $XINETD_DIR ]
    then
	patch_xinetd
    fi
    if [ "$UNAME" = "OSF1" ]
    then
	inst_driver_osf
    fi
}

do_uninstall() {
    echo "Unnstall ParaStation"
    do_info
    cleanup_services
    if [ -f $INETD_CNF ]
    then
	cleanup_inetd
    fi
    if [ -d $XINETD_DIR ]
    then
	cleanup_xinetd
    fi
    if [ "$UNAME" = "OSF1" ]
    then
	deinst_driver_osf
    fi
}

do_info() {
    echo "Using ParaStation root: $PSMAIN"
}

do_help() {
    echo "Use: $0 [-i|-u|-h]"
    echo "-i       : installaton"
    echo "-u       : uninstallaton "
    echo "-h       : this poor help..."
}

#If sysconfig fails, try this and watch the console
#/sbin/sysconfig -v -c $PSMDRV

#To unload the driver
#/sbin/sysconfig -u $PSMDRV

#to delete the entry
#/sbin/sysconfigdb -d $PSMDRV

if [ "$UNAME" = "Linux" ]
then
    echo
elif [ "$UNAME" = "OSF1" ]
then
    echo
else
    echo "###################################"
    echo "# ATTENTION! Unknown OS ($UNAME)! #"
    echo "###################################"
fi

self_check_root

case "$1" in
    -i)
	do_install
	self_post_inst_msg
	;;
    -u)
	do_uninstall
	;;
    -h)
	do_help
	;;
    *)
	do_help
	exit 1
esac
