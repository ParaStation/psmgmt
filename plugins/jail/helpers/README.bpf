The eBPF cgroup device controller implementation consists of two
parts:

- The eBPF device controller program itself that will be loaded into
  kernel space in order to do its work there and
- an additional eBPF loader that runs in user-space with the sole task
  to load and configure the eBPF device controller in kernel space

The eBPF loader is a C program using libbpf. It can and will be built
via the platform's standard tool-chain.

In contrast, the eBPF device controller requires a dedicated compiler
in order to create the bytecode to be interpreted in the kernel's
virtual machine. This eBPF program can be compiled into bytecode using
a version of Clang that supports the corresponding target. It might be
called via:

clang -O2 -target bpf -c bpf_device_controller.c -g -o bpf_cgroup_device

It is important to note that the `-g` flag is mandatory. It
generates debugging information which in turn is essential for generating
BTF (BPF Type Format) information. Without it the `.BTF` section of the
eBPF program will be absent and loading it will fail.

As a requirement libbpf-devel is need. Depending on the system additional
repositories might be enabled (e.g. for Rocky Linux crb) using the package
manager.

dnf config-manager --set-enabled crb
dnf update
dnf install libbpf-devel

Since the compiled bytecode is platform independent, it will be
shipped as a binary blob with the psmgmt package. Thus, no specific
eBPF tool-chain is required to build and install psmgmt.
